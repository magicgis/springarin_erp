package com.springrain.erp.modules.amazoninfo.scheduler;


import java.net.URL;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.gargoylesoftware.htmlunit.HttpMethod;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.WebRequest;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.DomText;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.util.NameValuePair;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.springrain.erp.common.config.Global;
import com.springrain.erp.common.email.MailInfo;
import com.springrain.erp.common.email.MailManager;
import com.springrain.erp.common.service.BaseService;
import com.springrain.erp.common.utils.DateUtils;
import com.springrain.erp.common.utils.HttpRequest;
import com.springrain.erp.common.utils.MathUtils;
import com.springrain.erp.common.utils.StringUtils;
import com.springrain.erp.modules.amazoninfo.entity.AmazonPromotionsWarning;
import com.springrain.erp.modules.amazoninfo.entity.AmazonPromotionsWarningItem;
import com.springrain.erp.modules.amazoninfo.entity.SaleReport;
import com.springrain.erp.modules.amazoninfo.htmlunit.AmzLoginPool;
import com.springrain.erp.modules.amazoninfo.htmlunit.CountryType;
import com.springrain.erp.modules.amazoninfo.htmlunit.LoginUtil;
import com.springrain.erp.modules.amazoninfo.service.AmazonProduct2Service;
import com.springrain.erp.modules.amazoninfo.service.AmazonProductService;
import com.springrain.erp.modules.amazoninfo.service.AmazonPromotionsWarningService;
import com.springrain.erp.modules.amazoninfo.service.ProductPriceService;
import com.springrain.erp.modules.amazoninfo.service.SaleReportService;
import com.springrain.erp.modules.amazoninfo.service.order.AmazonOrderService;
import com.springrain.erp.modules.amazoninfo.web.AmazonPromotionsWarningController;
import com.springrain.erp.modules.psi.service.PsiInventoryFbaService;
import com.springrain.erp.modules.psi.service.PsiProductEliminateService;
import com.springrain.erp.modules.psi.service.PsiProductGroupUserService;
import com.springrain.erp.modules.psi.service.PsiProductService;
import com.springrain.erp.modules.sys.entity.User;
import com.springrain.erp.modules.sys.service.SystemService;
import com.springrain.erp.modules.weixin.utils.WeixinSendMsgUtil;


public class PromotionsWarnMonitor {

	@Autowired
	private AmazonPromotionsWarningService amazonPromotionsWarningService;
	@Autowired
	private AmazonProductService amazonProductService;
	@Autowired
	private MailManager              mailManager;
	@Autowired
	private SystemService systemService;
	@Autowired
	private PsiProductService productService;
	@Autowired
	private PsiInventoryFbaService fbaService; 
	@Autowired
	private AmazonOrderService 		orderService;
	@Autowired
	private PsiProductGroupUserService psiProductGroupUserService;
	@Autowired
	private AmazonOrderService amazonOrderService;
	@Autowired
	private SaleReportService	saleReportService;
	@Autowired
	private AmazonProduct2Service amazonProduct2Service;
	@Autowired
	private ProductPriceService productPriceService;
	@Autowired
	private PsiProductEliminateService psiProductEliminateService;
	
	private static Map<String,String> countryNameMap;
    private static List<String> countryList;
    private final static Pattern pattern =  Pattern.compile("<a class=\"a-link-normal mt-link-content\" href=\"[^<]+</a>");
	static{
		countryNameMap=Maps.newHashMap();
		countryNameMap.put("de","德国");
		countryNameMap.put("fr","法国");
		countryNameMap.put("it","意大利");
		countryNameMap.put("es","西班牙");
		countryNameMap.put("uk","英国");
		countryNameMap.put("com","美国");
		countryNameMap.put("ca","加拿大");
		countryNameMap.put("jp","日本");
		countryNameMap.put("mx","墨西哥");
		countryList=Lists.newArrayList("de","com","uk","fr","jp","it","es","ca","mx");
	}
	private final static Logger logger = LoggerFactory.getLogger(PromotionsWarnMonitor.class);
	

	public void saveData(){
		/*try{
			orderService.initRateSn();
		}catch(Exception e ){}*/
		if(!AmazonPromotionsWarningController.flag){
			logger.info("折扣开始");
			AmazonPromotionsWarningController.flag=true;
			Map<String,List<AmazonPromotionsWarning>> map=Maps.newHashMap();//全局折扣
			Map<String,Set<String>> claimMap=Maps.newHashMap();//无折扣码
			Map<String,Set<String>> noExistsMap=Maps.newHashMap();//erp不存在折扣
			
			Map<String,Set<String>> specialMap=Maps.newHashMap();
			
			Map<String,Set<String>> allKindOfMap=Maps.newHashMap();
			Map<String,Set<String>> warnMap=Maps.newHashMap();
			Set<String> deleteSets =Sets.newHashSet();
			final Map<String,List<String>> isActivePromotions=Maps.newHashMap();
			for(int i = 0;i <CountryType.values().length;i++){
				CountryType country = CountryType.values()[i];
				try{
					scannerData2(claimMap,map,noExistsMap,country,amazonPromotionsWarningService,amazonProductService,isActivePromotions,allKindOfMap,specialMap,warnMap,deleteSets);
				}catch(Exception e) {
					logger.error(country+"-"+e.getMessage(),e);
				}
			}
			logger.info("折扣结束");
			
			
			
			AmazonPromotionsWarningController.flag=false;
			Map<String,String> roleNameMap=Maps.newHashMap();
			roleNameMap.put("amazoninfo:feedSubmission:", "1");
			roleNameMap.put("amazoninfo:email:all", "0");
			Map<String,Map<String,Set<String>>> newCompose=systemService.getEmailMap(countryList,roleNameMap);
			Map<String, String> emailAndLoginNameMap = systemService.findLoginNameByEmail();
			
			Map<String,Map<String,String>> partMap =Maps.newHashMap(); 
			if(allKindOfMap!=null&&allKindOfMap.size()>0){
				try{
					for (Map.Entry<String,Set<String>> entryAll : allKindOfMap.entrySet()) {  
					    String countryKey=entryAll.getKey();
						Set<String> promotionIds=Sets.newHashSet();
						for (String proIdAndReason:entryAll.getValue()) {
							promotionIds.add(proIdAndReason.split(",reason:")[0]);
						}
						if(promotionIds.size()<=6){
							logger.info("1调用amazon接口start");
							Map<String,String> curResMap = this.productService.endPromotions(countryKey,promotionIds);
							logger.info("1调用amazon接口end");
							if(curResMap!=null&&curResMap.size()>0){
								partMap.put(countryKey,curResMap);
								try{//
									if("com,de".contains(countryKey)){
										for (Map.Entry<String,String> entry : curResMap.entrySet()) { 
										    String tempProId=entry.getKey();
											if(entry.getValue().startsWith("成功")&&tempProId.contains("WEB")){
												String proCode=amazonPromotionsWarningService.getPromotionCode(tempProId,countryKey);
												if(StringUtils.isNotBlank(proCode)){
													String countryCode=("com".equals(countryKey)?"us":countryKey);
													String pageUrl="http://50.62.30.1/api2.0/public/magento/codeStatus?app_key=azmv9M3sU2SI2aMK9qMAfF6sB5l2pF96&code="+proCode+"&country="+countryCode+"&status=0";
													Document  doc=HttpRequest.reqUrl(pageUrl, null, false);
													//返回1  code存在并关掉
													//返回2  code不存在
													if(doc!=null){
														logger.info("官网code："+doc.text());
													}
												}
											}
										}
									}
								}catch(Exception e){logger.error("error",e);} 
								for (Map.Entry<String,String> entry : curResMap.entrySet()) {  
								    String tranId=entry.getKey();
									this.amazonPromotionsWarningService.updateStaAndRes(tranId,countryKey, partMap.get(countryKey).get(tranId));
								}
							}else{
								logger.info("返回结果为空");
							}
						}
						
					}
				}catch(Exception e){
					logger.error("erp折扣标准"+e.getMessage(),e);
				}
			}
			
			Map<String,String> resMap =Maps.newHashMap(); 
			if(claimMap!=null&&claimMap.size()>0){
				try{
					//分国家结束促销预警
					for (Map.Entry<String,Set<String>> entry : claimMap.entrySet()) { 
					    String countryKey=entry.getKey();
						Set<String> promotionIds=entry.getValue();
						if(promotionIds.size()<=6){
							logger.info("2调用amazon接口start");
							Map<String,String> curResMap = this.productService.endPromotions(countryKey,promotionIds);
							logger.info("2调用amazon接口end");
							if(curResMap!=null&&curResMap.size()>0){
								resMap.putAll(curResMap);
								
								try{//
									if("com,de".contains(countryKey)){
										for (Map.Entry<String,String> entryResMap : curResMap.entrySet()) { 
										    String tempProId=entryResMap.getKey();
											if(entryResMap.getValue().startsWith("成功")&&tempProId.startsWith("WEB")){
												String proCode=amazonPromotionsWarningService.getPromotionCode(tempProId,countryKey);
												if(StringUtils.isNotBlank(proCode)){
													String countryCode=("com".equals(countryKey)?"us":countryKey);
													String pageUrl="http://50.62.30.1/api2.0/public/magento/codeStatus?app_key=azmv9M3sU2SI2aMK9qMAfF6sB5l2pF96&code="+proCode+"&country="+countryCode+"&status=0";
													Document  doc=HttpRequest.reqUrl(pageUrl, null, false);
													if(doc!=null){
														logger.info("官网code"+doc.text());
													}
												}
											}
										}
									}
								}catch(Exception e){logger.error("error",e);} 
								
								for (Map.Entry<String,String> entryRs: resMap.entrySet()) { 
								    String tranId=entryRs.getKey();
									this.amazonPromotionsWarningService.updateStaAndRes(tranId,countryKey,entryRs.getValue());
								}
							}else{
								logger.info("返回结果为空");
							}
						}
						
					}
				}catch(Exception e){
					logger.error("erp不存在折扣"+e.getMessage(),e);
				}
			}
			
			Map<String,String> noExistsResultMap =Maps.newHashMap(); 
			if(noExistsMap!=null&&noExistsMap.size()>0){
				try{
					//分国家结束促销预警
					for (Map.Entry<String,Set<String>> entry : noExistsMap.entrySet()) {  
					    String countryKey=entry.getKey();
						Set<String> promotionIds=entry.getValue();
						if(promotionIds.size()<=6){
							logger.info("3调用amazon接口start");
							Map<String,String> curResMap = this.productService.endPromotions(countryKey,promotionIds);
							logger.info("3调用amazon接口end");
							if(curResMap!=null&&curResMap.size()>0){
								noExistsResultMap.putAll(curResMap);
								for (Map.Entry<String,String> entryRs : noExistsResultMap.entrySet()) {  
								    String tranId=entryRs.getKey();
									try{
										this.amazonPromotionsWarningService.updateStaAndRes(tranId,countryKey,entryRs.getValue());
									}catch(Exception e){
										logger.error("未设置折扣码"+e.getMessage(),e);
									}
								}
							}else{
								logger.info("返回结果为空");
							}
						}
					}
				}catch(Exception e){
					logger.error("未设置折扣码"+e.getMessage(),e);
				}
			}
			
			
			
			
			if(map!=null&&map.size()>0){
				try{
					//分国家结束促销预警
					for (Map.Entry<String,List<AmazonPromotionsWarning>> entry : map.entrySet()) {  
					    String countryKey=entry.getKey();
						List<AmazonPromotionsWarning> promotionsList=entry.getValue();
						Set<String> promotionIds=Sets.newHashSet();
						for (AmazonPromotionsWarning warn: promotionsList) {
							promotionIds.add(warn.getPromotionId());
						}
						if(promotionIds.size()<=6){
							logger.info("4调用amazon接口start");
							Map<String,String> curResMap = this.productService.endPromotions(countryKey,promotionIds);
							logger.info("4调用amazon接口end");
							if(curResMap!=null&&curResMap.size()>0){
								resMap.putAll(curResMap);
								for (Map.Entry<String,String> entryRs : resMap.entrySet()) {  
								    String tranId=entryRs.getKey();
									this.amazonPromotionsWarningService.updateStaAndRes(tranId,countryKey,entryRs.getValue());
								}
							}else{
								logger.info("返回结果为空");
							}
						}
						
					}
				}catch(Exception e){
					logger.error("全局折扣"+e.getMessage(),e);
				}
			}
			
			if((claimMap!=null&&claimMap.size()>0)||(map!=null&&map.size()>0)||(noExistsResultMap!=null&&noExistsResultMap.size()>0)||(allKindOfMap!=null&&allKindOfMap.size()>0)||(specialMap!=null&&specialMap.size()>0)){
				try{
					for (Map.Entry<String, Map<String, Set<String>>>  entry : newCompose.entrySet()) {  
					    String type =entry.getKey();
						if("0".equals(type)){
							  for (Map.Entry<String, Set<String>>  entryRs : entry.getValue().entrySet()) {  
							        String keyStr=entryRs.getKey();
								    StringBuffer content= new StringBuffer("");
				        			//content.append("hi,all <br/> &nbsp;&nbsp;&nbsp;&nbsp;以下未设置折扣码!");
				        			content.append("<table width='90%' style='border:1px solid #cad9ea;color:#666; '><tr style='background-repeat:repeat-x;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#4EFEB3; '>");
				        			content.append("<th>Type</th><th>Country</th><th>Promotion ID</th><th>Result</th></tr>");
				        			StringBuffer temp= new StringBuffer("");
				        			StringBuffer temp2= new StringBuffer("");
				        			for (String country : countryList) {
				        				String suff =country;
				        				if("uk,jp".contains(country)){
				        						 suff = "co."+suff;
				        				}else if("mx".equals(country)){
				        						suff = "com."+suff;
				        				}
						        		if(keyStr.contains(country)){
						        			if(claimMap!=null&&claimMap.size()>0){
						        				Set<String> entireCatalog=claimMap.get(country);
							        			if(entireCatalog!=null&&entireCatalog.size()>0){
								        			for (String proId: entireCatalog) {
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>未设置折扣码</td><td>"+("com".equals(country)?"us":country)+"</td><td>"+proId+"</td><td>"+resMap.get(proId)+"</td></tr>");
								        				temp2.append("未设置折扣码,country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:"+resMap.get(proId)+";\n\n");
								        			}
							        			}
						        			}
						        			
						        			if(map!=null&&map.size()>0){
						        				List<AmazonPromotionsWarning> entireCatalog=map.get(country);
							        			if(entireCatalog!=null&&entireCatalog.size()>0){
								        			for (AmazonPromotionsWarning proWarn : entireCatalog) {
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>全局折扣</td><td>"+("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+"</td><td>"+proWarn.getPromotionId()+"</td><td>"+resMap.get(proWarn.getPromotionId())+"</td></tr>");
								        				temp2.append("全局折扣,country:"+("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+",Promotion ID:"+proWarn.getPromotionId()+",Purchased Items:"+proWarn.getPurchasedItems()+",Result:"+resMap.get(proWarn.getPromotionId())+";\n\n");
								        			}
							        			}
						        			}
						        			
						        			if(noExistsMap!=null&&noExistsMap.size()>0){
						        				Set<String> entireCatalog=noExistsMap.get(country);
							        			if(entireCatalog!=null&&entireCatalog.size()>0){
								        			for (String proId: entireCatalog) {
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>折扣不存在或未审核</td><td>"+("com".equals(country)?"us":country)+"</td><td>"+proId+"</td><td>"+noExistsResultMap.get(proId)+"</td></tr>");
								        				temp2.append("折扣不存在或未审核,country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:"+noExistsResultMap.get(proId)+";\n\n");
								        			}
							        			}
						        			}
						        			
						        			if(allKindOfMap!=null&&allKindOfMap.size()>0){
						        				Set<String> partCodeMap=allKindOfMap.get(country);
						        				if(partCodeMap!=null&&partCodeMap.size()>0){
						        					for (String proIdAndReason: partCodeMap) {
						        						String proId=proIdAndReason.split(",reason:")[0];
						        						String reason=proIdAndReason.split(",reason:")[1];
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td>"+proId+"</td><td>"+partMap.get(country).get(proId)+"</td></tr>");
								        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:"+partMap.get(country).get(proId)+";\n\n");
								        			}
						        					
						        				}
						        			}
						        			
						        			if(specialMap!=null&&specialMap.size()>0){
						        				Set<String> partCodeMap=specialMap.get(country);
						        				if(partCodeMap!=null&&partCodeMap.size()>0){
						        					for (String proIdAndReason: partCodeMap) {
						        						String proId=proIdAndReason.split(",reason:")[0];
						        						String reason=proIdAndReason.split(",reason:")[1];
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td><a href='"+BaseService.BASE_WEBPATH+Global.getAdminPath()+"/amazoninfo/promotionsWarning?proId="+URLEncoder.encode(proId,"utf-8")+"&country="+country+"'>"+proId+"</a></td><td>折扣利润不符合要求需再次审核</td></tr>");
								        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:折扣利润不符合要求需再次审核;\n\n");
								        			}
						        					
						        				}
						        			}
						        			
						        		}
						        		
						        		
						        		if(warnMap!=null&&warnMap.size()>0){
					        				Set<String> partCodeMap=warnMap.get(country);
					        				if(partCodeMap!=null&&partCodeMap.size()>0){
					        					for (String proIdAndReason: partCodeMap) {
					        						String proId=proIdAndReason.split(",reason:")[0];
					        						String reason=proIdAndReason.split(",reason:")[1];
							        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
							        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td><a href='"+BaseService.BASE_WEBPATH+Global.getAdminPath()+"/amazoninfo/promotionsWarning?proId="+URLEncoder.encode(proId,"utf-8")+"&country="+country+"'>"+proId+"</a>&nbsp;&nbsp;<a href='https://sellercentral.amazon."+suff+"/promotions/view?trackingId="+URLEncoder.encode(proId,"utf-8")+"'><b>Amazon</b></a></td><td>特批折扣利润不符合要求需两人再次审核</td></tr>");
							        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:特批折扣利润或规则不符合要求需两人再次审核;\n\n");
							        			}
					        					
					        				}
					        			}
									}	
									content.append(temp);
				        			content.append("</table>");
				        			if(StringUtils.isNotEmpty(temp)){
						    			Date date = new Date();
						    			String toEmail="";
						    			String toEmail2="";
						    			StringBuffer buf1= new StringBuffer();
						    			StringBuffer buf2= new StringBuffer();
						    			for (String set :entryRs.getValue()) {
						    				buf1.append(set+",");
						    				buf2.append(emailAndLoginNameMap.get(set)+"|");
										}
						    			toEmail=buf1.toString();
						    			toEmail2=buf2.toString();
						    			toEmail=toEmail.substring(0, toEmail.length()-1);
						    			toEmail2=toEmail2.substring(0, toEmail2.length()-1);
						    			
						    			String  toAddress=toEmail;
										final MailInfo mailInfo = new MailInfo(toAddress,"折扣预警关闭及未设置监控提醒"+DateUtils.getDate("-yyyy/MM/dd"),date);
										mailInfo.setContent(content.toString());
										new Thread(){
											public void run(){   
												mailManager.send(mailInfo);
											}
										}.start();
										
										 try{
												WeixinSendMsgUtil.sendTextMsgToUser(toEmail2,temp2.toString());
											}catch(Exception e){
												logger.error("cross帖微信发送账号错误异常！",e);
											}
						    		}
							  }
						}else if("1".equals(type)){
							  for (Map.Entry<String, Set<String>>  entryRs : entry.getValue().entrySet()) {  
							        String keyStr=entryRs.getKey();
								    StringBuffer content= new StringBuffer("");
				        			//content.append("hi,all <br/> &nbsp;&nbsp;&nbsp;&nbsp;以下未设置折扣码!");
				        			content.append("<table width='90%' style='border:1px solid #cad9ea;color:#666; '><tr style='background-repeat:repeat-x;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#4EFEB3; '>");
				        			content.append("<th>Type</th><th>Country</th><th>Promotion ID</th><th>Result</th></tr>");
				        			StringBuffer temp= new StringBuffer("");
				        			StringBuffer temp2= new StringBuffer("");
				        			for (String country : countryList) {
				        				String suff =country;
				        				if("uk,jp".contains(country)){
				        						 suff = "co."+suff;
				        				}else if("mx".equals(country)){
				        						suff = "com."+suff;
				        				}
						        		if(keyStr.contains(country)){
						        			if(claimMap!=null&&claimMap.size()>0){
						        				Set<String> entireCatalog=claimMap.get(country);
							        			if(entireCatalog!=null&&entireCatalog.size()>0){
								        			for (String proId: entireCatalog) {
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>未设置折扣码</td><td>"+("com".equals(country)?"us":country)+"</td><td>"+proId+"</td><td>"+resMap.get(proId)+"</td></tr>");
								        				temp2.append("未设置折扣码,country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:"+resMap.get(proId)+";\n\n");
								        			}
							        			}
						        			}
						        			
						        			if(map!=null&&map.size()>0){
						        				List<AmazonPromotionsWarning> entireCatalog=map.get(country);
							        			if(entireCatalog!=null&&entireCatalog.size()>0){
								        			for (AmazonPromotionsWarning proWarn : entireCatalog) {
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>全局折扣</td><td>"+("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+"</td><td>"+proWarn.getPromotionId()+"</td><td>"+resMap.get(proWarn.getPromotionId())+"</td></tr>");
								        				temp2.append("全局折扣,country:"+("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+",Promotion ID:"+proWarn.getPromotionId()+",Purchased Items:"+proWarn.getPurchasedItems()+",Result:"+resMap.get(proWarn.getPromotionId())+";\n\n");
								        			}
							        			}
						        			}
						        			
						        			if(noExistsMap!=null&&noExistsMap.size()>0){
						        				Set<String> entireCatalog=noExistsMap.get(country);
							        			if(entireCatalog!=null&&entireCatalog.size()>0){
								        			for (String proId: entireCatalog) {
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>折扣不存在或未审核</td><td>"+("com".equals(country)?"us":country)+"</td><td>"+proId+"</td><td>"+noExistsResultMap.get(proId)+"</td></tr>");
								        				temp2.append("折扣不存在或未审核,country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:"+noExistsResultMap.get(proId)+";\n\n");
								        			}
							        			}
						        			}
						        			
						        			if(allKindOfMap!=null&&allKindOfMap.size()>0){
						        				Set<String> partCodeMap=allKindOfMap.get(country);
						        				if(partCodeMap!=null&&partCodeMap.size()>0){
						        					for (String proIdAndReason: partCodeMap) {
						        						String proId=proIdAndReason.split(",reason:")[0];
						        						String reason=proIdAndReason.split(",reason:")[1];
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td>"+proId+"</td><td>"+partMap.get(country).get(proId)+"</td></tr>");
								        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:"+partMap.get(country).get(proId)+";\n\n");
								        			}
						        				}
						        			}
						        			
						        			if(specialMap!=null&&specialMap.size()>0){
						        				Set<String> partCodeMap=specialMap.get(country);
						        				if(partCodeMap!=null&&partCodeMap.size()>0){
						        					for (String proIdAndReason: partCodeMap) {
						        						String proId=proIdAndReason.split(",reason:")[0];
						        						String reason=proIdAndReason.split(",reason:")[1];
								        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
								        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td><a href='"+BaseService.BASE_WEBPATH+Global.getAdminPath()+"/amazoninfo/promotionsWarning?proId="+URLEncoder.encode(proId,"utf-8")+"&country="+country+"'>"+proId+"</a></td><td>折扣利润不符合要求需再次审核</td></tr>");
								        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:折扣利润不符合要求需再次审核;\n\n");
								        			}
						        					
						        				}
						        			}
						        		}
						        		if(warnMap!=null&&warnMap.size()>0){
					        				Set<String> partCodeMap=warnMap.get(country);
					        				if(partCodeMap!=null&&partCodeMap.size()>0){
					        					for (String proIdAndReason: partCodeMap) {
					        						String proId=proIdAndReason.split(",reason:")[0];
					        						String reason=proIdAndReason.split(",reason:")[1];
							        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
							        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td><a href='"+BaseService.BASE_WEBPATH+Global.getAdminPath()+"/amazoninfo/promotionsWarning?proId="+URLEncoder.encode(proId,"utf-8")+"&country="+country+"'>"+proId+"</a>&nbsp;&nbsp;<a href='https://sellercentral.amazon."+suff+"/promotions/view?trackingId="+URLEncoder.encode(proId,"utf-8")+"'><b>Amazon</b></a></td><td>特批折扣利润不符合要求需两人再次审核</td></tr>");
							        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:特批折扣利润或规则不符合要求需两人再次审核;\n\n");
							        			}
					        					
					        				}
					        			}
									}	
									content.append(temp);
				        			content.append("</table>");
				        			if(StringUtils.isNotEmpty(temp)){
						    			Date date = new Date();
						    			String toEmail="";
						    			String toEmail2="";
						    			StringBuffer buf1= new StringBuffer();
						    			StringBuffer buf2= new StringBuffer();
						    			for (String set :entryRs.getValue()) {
						    				buf1.append(set+",");
						    				buf2.append(emailAndLoginNameMap.get(set)+"|");
										}
						    			toEmail=buf1.toString();
						    			toEmail2=buf2.toString();
						    			toEmail=toEmail.substring(0, toEmail.length()-1);
						    			toEmail2=toEmail2.substring(0, toEmail2.length()-1);
						    			
						    			String  toAddress=toEmail;
										final MailInfo mailInfo = new MailInfo(toAddress,"折扣预警关闭及未设置监控提醒"+DateUtils.getDate("-yyyy/MM/dd"),date);
										mailInfo.setContent(content.toString());
										new Thread(){
											public void run(){   
												mailManager.send(mailInfo);
											}
										}.start();
										
										 try{
												WeixinSendMsgUtil.sendTextMsgToUser(toEmail2,temp2.toString());
											}catch(Exception e){
												logger.error("cross帖微信发送账号错误异常！",e);
											}
						    		}
							  }
						}
					}		
					
				}catch(Exception e){
					logger.error("全局折扣无折扣码"+e.getMessage(),e);
				}
			}
			
			try{
			  if(specialMap!=null&&specialMap.size()>0){
					StringBuffer temp= new StringBuffer("");
        			StringBuffer temp2= new StringBuffer("");
        			StringBuffer content= new StringBuffer("");
	        		content.append("<table width='90%' style='border:1px solid #cad9ea;color:#666; '><tr style='background-repeat:repeat-x;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#4EFEB3; '>");
	        		content.append("<th>Type</th><th>Country</th><th>Promotion ID</th><th>Result</th></tr>");
	        		for (Map.Entry<String,Set<String>> entry : specialMap.entrySet()) {  
	        		    String country =entry.getKey();
						Set<String> partCodeMap=entry.getValue();
	    				if(partCodeMap!=null&&partCodeMap.size()>0){
	    					for (String proIdAndReason: partCodeMap) {
	    						String proId=proIdAndReason.split(",reason:")[0];
	    						String reason=proIdAndReason.split(",reason:")[1];
		        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
		        				temp.append("<td>"+reason+"</td><td>"+("com".equals(country)?"us":country)+"</td><td><a href='"+BaseService.BASE_WEBPATH+Global.getAdminPath()+"/amazoninfo/promotionsWarning?proId="+URLEncoder.encode(proId,"utf-8")+"&country="+country+"'>"+proId+"</a></td><td>利润分析不符合需求,请再次审核</td></tr>");
		        				temp2.append(reason+",country:"+("com".equals(country)?"us":country)+",Promotion ID:"+proId+",Result:利润分析不符合需求,请再次审核;\n\n");
		        				try{
									this.amazonPromotionsWarningService.updateCheckFlag(proId,country);
								}catch(Exception e){
									logger.error(proId+"再次审核状态更新失败"+e.getMessage(),e);
								}
	    					}
	    				}
					}
					content.append(temp);
        			content.append("</table>");
        			
					if(StringUtils.isNotEmpty(temp)){
						List<User> users = systemService.findUserByPermission("amazon:promotionsWarning:review");
						if(users!=null && users.size()>0){
							String  toAddress="";
							String wxName="";
							StringBuffer buf1= new StringBuffer();
							StringBuffer buf2= new StringBuffer();
							for (User user : users) {
								buf1.append(user.getEmail()+",");
								buf2.append(user.getName()+"|");
							}
							toAddress = buf1.toString();
							wxName = buf2.toString();
									
							final MailInfo mailInfo = new MailInfo(toAddress+"eileen@inateck.com","再次审核折扣提醒"+DateUtils.getDate("-yyyy/MM/dd"),new Date());
							mailInfo.setContent(content.toString());
							new Thread(){
								public void run(){   
									mailManager.send(mailInfo);
								}
							}.start();
							
							try{
								WeixinSendMsgUtil.sendTextMsgToUser(wxName+"eileen",temp2.toString());
							}catch(Exception e){
								logger.error("cross帖微信发送账号错误异常！",e);
						    }
						}
					}
					
    			  }
			}catch(Exception e){
				logger.error("折扣利润邮件发送异常",e);
			}
			
			try{
				Map<String,List<AmazonPromotionsWarning>> warnList=amazonPromotionsWarningService.getUnPromotions();
				if(warnList!=null&&warnList.size()>0){
					Map<String,Map<String,Integer>> fbaMap=fbaService.getFbaInventroyDataByAsin();//国家-asin-库存
					Set<String>   asinList=saleReportService.getPanEuProductAsin();
					Set<String> updateSet=Sets.newHashSet();
					for (Map.Entry<String, Map<String, Set<String>>> entry : newCompose.entrySet()) {  
					    String type =entry.getKey();
						if("0".equals(type)){
							  for (Map.Entry<String, Set<String>> entryRs:entry.getValue().entrySet()) {
								    String keyStr=entryRs.getKey();
								    String content="以下折扣ID未设置监控或正在监控状态折扣有在售产品未设置监控数量,系统默认监控在售产品累计数量设置为库存的1/4.\n\n";
				        			StringBuffer temp= new StringBuffer("");
				        			for (String country : countryList) {
						        		if(keyStr.contains(country)){
						        			List<AmazonPromotionsWarning> entireCatalog=warnList.get(country);
						        			if(entireCatalog!=null&&entireCatalog.size()>0){
							        			for (AmazonPromotionsWarning proWarn : entireCatalog) {
							        				Integer id=proWarn.getId();
							        			    String asinStr=proWarn.getClaimCode();
							        			    boolean flag=false;
							        			    try{
									        			    if(asinStr.contains(",")){
									        			    	String[] asinArr=asinStr.split(",");
									        			    	for (String asin : asinArr) {
									        			    		if(asinList!=null&&asinList.contains(asin)&&"uk,fr,it,es".contains(country)){
									        			    			if(fbaMap!=null&&fbaMap.get("de")!=null&&fbaMap.get("de").get(asin)!=null){
												        			    	Integer quantity=MathUtils.roundUp(fbaMap.get("de").get(asin)*1.0d/4);
												        			    	updateSet.add(id+","+asin+","+quantity);
												        			    	flag=true;
												        			    }
										        			    	}else{
										        			    		if(fbaMap!=null&&fbaMap.get(country)!=null&&fbaMap.get(country).get(asin)!=null){
												        			    	Integer quantity=MathUtils.roundUp(fbaMap.get(country).get(asin)*1.0d/4);
												        			    	updateSet.add(id+","+asin+","+quantity);
												        			    	flag=true;
												        			    }
										        			    	}
																}
									        			    }else{
									        			    	if(asinList!=null&&asinList.contains(asinStr)&&"uk,fr,it,es".contains(country)){
									        			    		if(fbaMap!=null&&fbaMap.get("de")!=null&&fbaMap.get("de").get(asinStr)!=null){
											        			    	Integer quantity=MathUtils.roundUp(fbaMap.get("de").get(asinStr)*1.0d/4);
											        			    	updateSet.add(id+","+asinStr+","+quantity);
											        			    	flag=true;
											        			    }
									        			    	}else{
									        			    		if(fbaMap!=null&&fbaMap.get(country)!=null&&fbaMap.get(country).get(asinStr)!=null){
											        			    	Integer quantity=MathUtils.roundUp(fbaMap.get(country).get(asinStr)*1.0d/4);
											        			    	updateSet.add(id+","+asinStr+","+quantity);
											        			    	flag=true;
											        			    }
									        			    	}
									        			    	
									        			    }
							        			    }catch(Exception e){
							        			    	logger.error("更新监控状态异常！",e);
							        			    }
							        			    if(flag){
							        			    	temp.append(("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+",Promotion ID:"+proWarn.getPromotionId()+";\n\n");
							        			    }
							        			    
							        			}
						        			}
						        		}
									}	
									
				        			if(StringUtils.isNotEmpty(temp)){
						    			String toEmail="";
						    			StringBuffer buf= new StringBuffer();
						    			for (String set :entryRs.getValue()) {
						    				buf.append(emailAndLoginNameMap.get(set)+"|");
										}
						    			toEmail = buf.toString();
						    			toEmail=toEmail.substring(0, toEmail.length()-1);
										 try{
												WeixinSendMsgUtil.sendTextMsgToUser(toEmail,content+temp.toString());
										}catch(Exception e){
												logger.error("折扣未监控微信发送账号错误异常！",e);
										}
						    		}
							  }
							 if(updateSet!=null&&updateSet.size()>0){
								 try{
									 amazonPromotionsWarningService.updateCumulativeQuantity(updateSet);
								 }catch(Exception e){
									 logger.error("更新监控状态异常！",e);
								 }
							 }
						}else if("1".equals(type)){
							  for (Map.Entry<String, Set<String>> entryRs:entry.getValue().entrySet()) {
								    String keyStr=entryRs.getKey();
								    String content="以下折扣ID未设置监控或正在监控状态折扣有在售产品未设置监控数量,系统默认监控在售产品累计数量设置为库存的1/4.\n\n";
				        			StringBuffer temp= new StringBuffer("");
				        			for (String country : countryList) {
						        		if(keyStr.contains(country)){
						        			List<AmazonPromotionsWarning> entireCatalog=warnList.get(country);
						        			if(entireCatalog!=null&&entireCatalog.size()>0){
						        				for (AmazonPromotionsWarning proWarn : entireCatalog) {
						        					    String asinStr=proWarn.getClaimCode();
								        			    boolean flag=false;
								        			    try{
										        			    if(asinStr.contains(",")){
										        			    	String[] asinArr=asinStr.split(",");
										        			    	for (String asin : asinArr) {
										        			    		
										        			    		if(asinList!=null&&asinList.contains(asin)&&"uk,fr,it,es".contains(country)){
										        			    			if(fbaMap!=null&&fbaMap.get("de")!=null&&fbaMap.get("de").get(asin)!=null){
													        			    	flag=true;
													        			    	break;
													        			    }
											        			    	}else{
											        			    		if(fbaMap!=null&&fbaMap.get(country)!=null&&fbaMap.get(country).get(asin)!=null){
													        			    	flag=true;
													        			    	break;
													        			    }
											        			    	}
																	}
										        			    }else{
										        			    	if(asinList!=null&&asinList.contains(asinStr)&&"uk,fr,it,es".contains(country)){
										        			    		if(fbaMap!=null&&fbaMap.get("de")!=null&&fbaMap.get("de").get(asinStr)!=null){
												        			    	flag=true;
												        			    }
										        			    	}else{
										        			    		if(fbaMap!=null&&fbaMap.get(country)!=null&&fbaMap.get(country).get(asinStr)!=null){
												        			    	flag=true;
												        			    }
										        			    	}
										        			    }
								        			    }catch(Exception e){
								        			    	logger.error("更新监控状态异常！",e);
								        			    }
									        			if(flag){
									        				 temp.append(("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+",Promotion ID:"+proWarn.getPromotionId()+";\n\n");
									        			}
							        			}
						        			}
						        		}
									}	
									
				        			if(StringUtils.isNotEmpty(temp)){
						    			String toEmail="";
						    			StringBuffer buf= new StringBuffer();
						    			for (String set :entryRs.getValue()) {
						    				buf.append(emailAndLoginNameMap.get(set)+"|");
										}
						    			toEmail = buf.toString();
						    			toEmail=toEmail.substring(0, toEmail.length()-1);
										 try{
												WeixinSendMsgUtil.sendTextMsgToUser(toEmail,content+temp.toString());
											}catch(Exception e){
												logger.error("折扣未监控微信发送账号错误异常！",e);
											}
						    		}
							  }
						}
					}	
				}
				
			}catch(Exception e){
				logger.error(e.getMessage(),e);
			}
			
			try{
				if(deleteSets!=null&&deleteSets.size()>0){
					final MailInfo mailInfo = new MailInfo("amazon-sales@inateck.com","折扣产品列表与亚马逊后台ASIN list不一致"+DateUtils.getDate("-yyyy/MM/dd"), new Date());
					StringBuffer buf= new StringBuffer("Hi,All 以下折扣产品列表与亚马逊后台ASIN list不一致：<br/>");
					for (String pro: deleteSets) {
						buf.append(pro+"<br/>");
					}
					mailInfo.setContent(buf.toString());
					mailInfo.setCcToAddress("eileen@inateck.com");
					new Thread(){
						public void run(){   
							mailManager.send(mailInfo);
						}
					}.start();
				}
			}catch(Exception e){
				logger.error(e.getMessage(),e);
			}
			
			try{
				Map<String,Map<String,String>> updateItemMap=amazonPromotionsWarningService.findPromotionsCode();
				if(updateItemMap!=null&&updateItemMap.size()>0){
					orderService.updatePromotionsCode(updateItemMap);
				}
			}catch(Exception e){logger.error(e.getMessage(),e);}
			
			try{
				if(warnMap!=null&&warnMap.size()>0){
					for (Map.Entry<String,Set<String>> entry : warnMap.entrySet()) {  
					    String country=entry.getKey();
						Set<String> proIdAndReasonSet=entry.getValue();
						Set<String> promotionsId=Sets.newHashSet();
						for (String proIdAndReason : proIdAndReasonSet) {
							String proId=proIdAndReason.split(",reason:")[0];
							promotionsId.add(proId);
						}
						amazonPromotionsWarningService.updateSpecialFlag(country,promotionsId);
					}
				}
			}catch(Exception e){logger.error(e.getMessage(),e);}
		}
	}
	
	public void scannerData2(Map<String,Set<String>> claimMap,Map<String,List<AmazonPromotionsWarning>> map,Map<String,Set<String>> noExistsMap,CountryType country,AmazonPromotionsWarningService amazonPromotionsWarningService,AmazonProductService amazonProductService,Map<String,List<String>> isActivePromotions,Map<String,Set<String>> allKindOfMap,Map<String,Set<String>> specialMap,Map<String,Set<String>> warnMap,Set<String> deleteSets ){
		WebClient  client = LoginUtil.register(country.getName(),false);
		if(client==null){
			logger.error("login error"+country.getName());
			throw new RuntimeException("login error"+country.getName());
		}
		WebRequest req= null;
		try {
			Map<String,String> results = new LinkedHashMap<String,String>();
			req = new WebRequest(new URL("https://sellercentral.amazon."+country.getSuffix()+"/promotions/manage/refresh/ref=xx_xx_pgnb_xx?searchType=status&statusSearchType=active"), HttpMethod.POST);

			req.setAdditionalHeader("X-Requested-With", "XMLHttpRequest");
			req.setAdditionalHeader("Content-Type", "application/json");
			int i =1;
			while(true){
				String requestBody = "{\"action\":\"PAGE_CHANGED\",\"pageNumber\":"+i+",\"recordsPerPage\":null,\"sortedColumnId\":\"endDateField\",\"sortOrder\":\"ASCENDING\",\"tableId\":\"managepromotionstable\",\"filters\":[],\"clientState\":{}}";
				req.setRequestBody(requestBody);
				HtmlPage page = client.getPage(req);
				//截取Id
				String content = page.asXml();
				Matcher matcher = pattern.matcher(content);
				boolean flag = true;
				while(matcher.find()){
					flag = false;
					String a = matcher.group();
					Document doc = Jsoup.parse(a);
					Element ele = doc.getElementsByTag("a").get(0);
					String href=ele.attr("href");
					String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
					
					results.put(trackId, ele.attr("href"));
					List<String> proList=isActivePromotions.get("com.inateck".equals(country.getName())?"com":country.getName());
					if(proList==null){
						proList=Lists.newArrayList();
						isActivePromotions.put("com.inateck".equals(country.getName())?"com":country.getName(),proList);
					}
					proList.add(trackId);
				}
				if(flag){
					if(results.size()==0){
						logger.info(page.asText());
					}
					break;
				}
				i++;
			}
			
			logger.info("count:"+results.size()+"!!!"+results);
			req = new WebRequest(new URL("https://sellercentral.amazon."+country.getSuffix()+"/promotions/manage/refresh/ref=xx_xx_pgnb_xx?searchType=status&statusSearchType=PENDING"), HttpMethod.POST);

			req.setAdditionalHeader("X-Requested-With", "XMLHttpRequest");
			req.setAdditionalHeader("Content-Type", "application/json");
			int ii =1;
			while(true){
				String requestBody = "{\"action\":\"PAGE_CHANGED\",\"pageNumber\":"+ii+",\"recordsPerPage\":null,\"sortedColumnId\":\"endDateField\",\"sortOrder\":\"ASCENDING\",\"tableId\":\"managepromotionstable\",\"filters\":[],\"clientState\":{}}";
				req.setRequestBody(requestBody);
				HtmlPage page = client.getPage(req);
				//截取Id
				String content = page.asXml();
				Matcher matcher = pattern.matcher(content);
				boolean flag = true;
				while(matcher.find()){
					flag = false;
					String a = matcher.group();
					Document doc = Jsoup.parse(a);
					Element ele = doc.getElementsByTag("a").get(0);
					String href=ele.attr("href");
					String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
					
					results.put(trackId, ele.attr("href"));
				}
				if(flag){
					if(results.size()==0){
						logger.info(page.asText());
					}
					break;
				}
				ii++;
			}
			logger.info("count:"+results.size()+"!!!"+results);
			
			int num1=0;
			int num2=0;
			List<String> isActiveList=Lists.newArrayList();
			if(results.size()>0){
				List<AmazonPromotionsWarning> promotions = new ArrayList<AmazonPromotionsWarning>();
				Map<String,String> maxPriceMap=amazonProduct2Service.getMaxPrice2();
				Map<String,String> minPriceMap=amazonProduct2Service.getMinPrice2();
				Map<String,Float>  safePriceMap=productPriceService.findAllProducSalePrice();
				Map<String, String> produPositionMap=psiProductEliminateService.findAllProductPosition();//产品定位
				Map<String, String> productIsNewMap = psiProductEliminateService.findIsNewMap();
				Map<String,Float> priceMap=amazonProduct2Service.findAllProductPrice();
				
				for (Entry<String, String> entry : results.entrySet()) {
					String tempCnt=("com.inateck".equals(country.getName())?"com":country.getName());
					Integer promotionsId=amazonPromotionsWarningService.isNotExist(entry.getKey(),tempCnt);
					if(promotionsId==null){//不存在 关闭
						AmazonPromotionsWarning promotion=getPromotionDetails(client,country.getName(), entry.getKey(),entry.getValue(),num1);
						if(promotion==null){
							continue;
						}
						if(promotion.getStartDate().equals(promotion.getEndDate())){
                        	continue;
					    }
						logger.info(entry.getKey()+"不存在  "+tempCnt);
						Set<String> temp=noExistsMap.get("com.inateck".equals(country.getName())?"com":country.getName());
						if(temp==null){
							temp=Sets.newHashSet();
							noExistsMap.put("com.inateck".equals(country.getName())?"com":country.getName(),temp);
						}
						temp.add(entry.getKey());
					}else{//edit
						AmazonPromotionsWarning promotion=amazonPromotionsWarningService.get(promotionsId);
						if(promotion==null){
							 promotion=amazonPromotionsWarningService.getById(promotionsId);
						}
                        
						if("R-JP deal ST1009 off 999 2017-4-21 11:35:12".equals(promotion.getPromotionId())){
							continue;
						}
						
						AmazonPromotionsWarning newPromotion=getPromotionDetails(client,country.getName(), entry.getKey(),entry.getValue(),num2);
						if(newPromotion==null){
							//logger.info("newPromotion没获取到");
							isActiveList.add(promotion.getPromotionId());
							continue;
						}
						if(newPromotion.getStartDate()!=null&&newPromotion.getStartDate().equals(newPromotion.getEndDate())){
                        	continue;
					    }
						if("F-DE A-Page P6 off 1 2017-4-20 10:56:27".equals(promotion.getPromotionId())||"F-DE A-Page P6 off 9.9 2017-4-25 10:50:20".equals(promotion.getPromotionId())
						||"F-US A-Page UCC1001US off 1% 2017-5-19 17:31:5".equals(promotion.getPromotionId())
						||"F-US A-Page UCC1001US off 1% 2017-5-19 17:30:0".equals(promotion.getPromotionId())
						||"S-DE A-Page P6 off BCST-S 2017-6-7 9:39:5".equals(promotion.getPromotionId())	
						||"S-UK A-Page P6 off BCST-S 2017-6-7 9:18:9".equals(promotion.getPromotionId())
						||"S-FR A-Page P6 off BCST-S 2017-6-7 9:48:54".equals(promotion.getPromotionId())		
						||"S-IT A-Page P6 off BCST-S 2017-6-7 9:55:59".equals(promotion.getPromotionId())		
						||"S-ES A-Page P6 off BCST-S 2017-6-7 10:3:14".equals(promotion.getPromotionId())
						||"S-US A-Page AD2002 off DB2001 2017-6-7 17:39:15".equals(promotion.getPromotionId())
						||"F-JP A-Page BR1005 BR1003 BP1109 off 30% 2017-12-15 14:17:17".equals(promotion.getPromotionId())
						||"F-JP A-Page AD2001 AD2002 FD2002 off 10% 2017-12-15 14:51:21".equals(promotion.getPromotionId())
						||"F-JP A-Page BK2001 BK2003 BK2005 off 20% 2017-12-15 14:38:40".equals(promotion.getPromotionId())){
							isActiveList.add(promotion.getPromotionId());
							continue;
						}
						
						if("2".equals(promotion.getWarningSta())||"3".equals(promotion.getWarningSta())||"4".equals(promotion.getWarningSta())||StringUtils.isNotBlank(promotion.getCheckFlag())){//草稿已取消关闭
							Set<String> temp=noExistsMap.get("com.inateck".equals(country.getName())?"com":country.getName());
							if(temp==null){
								temp=Sets.newHashSet();
								noExistsMap.put("com.inateck".equals(country.getName())?"com":country.getName(),temp);
							}
							temp.add(entry.getKey());
							continue;
						}
						
					
						
						if(StringUtils.isNotBlank(promotion.getBuyerGets())&&!promotion.getBuyerGets().contains("Free items")&&!promotion.getBuyerGets().contains("Post-order benefit")&&!promotion.getBuyerGets().equals(newPromotion.getBuyerGets())){
							       String tempSuffix=promotion.getBuyerGets().substring(0,promotion.getBuyerGets().lastIndexOf(" "));
		                 		   String tempSuffix2=newPromotion.getBuyerGets().substring(0,newPromotion.getBuyerGets().lastIndexOf(" "));   
		                     	   if(!tempSuffix.equals(tempSuffix2)){
		                     		        Set<String> temp=allKindOfMap.get(promotion.getCountry());
			    							if(temp==null){
			    								temp=Sets.newHashSet();
			    								allKindOfMap.put(promotion.getCountry(),temp);
			    							}
			    							temp.add(promotion.getPromotionId()+",reason:BuyerGets("+tempSuffix+")与后台("+tempSuffix2+")类型不一致");
			    							continue;
		                     	   }
	                     	
	                     	       double proBuyerPurchase=Double.parseDouble(promotion.getBuyerGets().substring(promotion.getBuyerGets().lastIndexOf(" ")).trim().replace(",", "."));
	    					       double proBuyerPurchase2=Double.parseDouble(newPromotion.getBuyerGets().substring(newPromotion.getBuyerGets().lastIndexOf(" ")).trim().replace(",", "."));
	    					       if(proBuyerPurchase!=proBuyerPurchase2){
		       					    	Set<String> temp=allKindOfMap.get(promotion.getCountry());
		    							if(temp==null){
		    								temp=Sets.newHashSet();
		    								allKindOfMap.put(promotion.getCountry(),temp);
		    							}
		    							temp.add(promotion.getPromotionId()+",reason:BuyerGets("+proBuyerPurchase+")与后台数字("+proBuyerPurchase2+")不一致");
		    							continue;
	    					       }
						    	
						  }
					   
					    
                        if(StringUtils.isNotBlank(promotion.getBuyerPurchases())&&!promotion.getBuyerPurchases().equals(newPromotion.getBuyerPurchases())){
                        	   String tempSuffix=promotion.getBuyerPurchases().substring(0,promotion.getBuyerPurchases().lastIndexOf(" "));
                    		   String tempSuffix2=newPromotion.getBuyerPurchases().substring(0,newPromotion.getBuyerPurchases().lastIndexOf(" "));   
                        	   if(!tempSuffix.equals(tempSuffix2)){
                        		   Set<String> temp=allKindOfMap.get(promotion.getCountry());
	    							if(temp==null){
	    								temp=Sets.newHashSet();
	    								allKindOfMap.put(promotion.getCountry(),temp);
	    							}
	    							temp.add(promotion.getPromotionId()+",reason:Buyer purchases("+tempSuffix+")与后台("+tempSuffix2+")类型不一致");
	    							continue;
                        	   }
                        	
                        	   double proBuyerPurchase=Double.parseDouble(promotion.getBuyerPurchases().substring(promotion.getBuyerPurchases().lastIndexOf(" ")).trim().replace(",", "."));
       					       double proBuyerPurchase2=Double.parseDouble(newPromotion.getBuyerPurchases().substring(newPromotion.getBuyerPurchases().lastIndexOf(" ")).trim().replace(",", "."));
       					       if(proBuyerPurchase!=proBuyerPurchase2){
	       					    	Set<String> temp=allKindOfMap.get(promotion.getCountry());
	    							if(temp==null){
	    								temp=Sets.newHashSet();
	    								allKindOfMap.put(promotion.getCountry(),temp);
	    							}
	    							temp.add(promotion.getPromotionId()+",reason:Buyer purchases("+proBuyerPurchase+")与后台数字("+proBuyerPurchase2+")不一致");
	    							continue;
       					       }
					    }
                        
						
						isActiveList.add(promotion.getPromotionId());
						
						promotion.setStartDate(newPromotion.getStartDate());
						promotion.setEndDate(newPromotion.getEndDate());
						promotion.setBuyerPurchases(newPromotion.getBuyerPurchases());
						promotion.setBuyerGets(newPromotion.getBuyerGets());
						promotion.setPurchasedItems(newPromotion.getPurchasedItems());
						promotion.setPromotion(newPromotion.getPromotion());
						promotion.setOneRedemption(newPromotion.getOneRedemption());
						promotion.setPromotionCode(newPromotion.getPromotionCode());
						promotion.setUpdateDate(new Date());
						promotion.setQualifyingItem(newPromotion.getQualifyingItem());
					
						Float maxPrice=0f;
						String maxPriceName="";
						Float minPrice=0f;
						String minPriceName="";
						Float saleMinPrice=0f;
						Float outMinPrice=0f;
						
						boolean isNotExist=true;
						boolean specialFlag=false;
						if(newPromotion.getItems()!=null){
							for (AmazonPromotionsWarningItem item : newPromotion.getItems()) {
								if(promotion.getItems()!=null){
									for (AmazonPromotionsWarningItem item1 : promotion.getItems()) {
										if(StringUtils.isBlank(item1.getProductNameColor())){
											item1.setProductNameColor(amazonProductService.findProductName(item1.getAsin(),"com.inateck".equals(country.getName())?"com":country.getName()));
										}
										if(item.getAsin().equals(item1.getAsin())){
											isNotExist=false;
											try{
												String key=("com.inateck".equals(country.getName())?"com":country.getName())+"_"+item.getAsin();
												String priceStr=maxPriceMap.get(key);
												if(priceStr!=null){
													String[] arr=priceStr.split(",");
													if(Float.parseFloat(arr[1])>maxPrice){
														maxPrice=Float.parseFloat(arr[1]);
														maxPriceName=item1.getProductNameColor();
													}
												}
												String minPriceStr=minPriceMap.get(key);
												if(minPriceStr!=null){
													String[] minArr=minPriceStr.split(",");
													if(minPrice==0){
														minPrice=Float.parseFloat(minArr[1]);
														minPriceName=item1.getProductNameColor();
													}
													if(Float.parseFloat(minArr[1])<minPrice){
														minPrice=Float.parseFloat(minArr[1]);
														minPriceName=item1.getProductNameColor();
													}
													String nameAndCountry=item1.getProductNameColor()+"_"+("com.inateck".equals(country.getName())?"com":country.getName());
													if("4".equals(produPositionMap.get(nameAndCountry))){
														if(outMinPrice==0){
															outMinPrice=Float.parseFloat(minArr[1]);
														}
														if(Float.parseFloat(minArr[1])<outMinPrice){
															outMinPrice=Float.parseFloat(minArr[1]);
														}
													}else{
														if(saleMinPrice==0){
															saleMinPrice=Float.parseFloat(minArr[1]);
														}
														if(Float.parseFloat(minArr[1])<saleMinPrice){
															saleMinPrice=Float.parseFloat(minArr[1]);
														}
													}
												}
											}catch(Exception e){
												logger.error("price",e);
											}
											
											
											if(StringUtils.isNotBlank(newPromotion.getMainAsin())&&newPromotion.getMainAsin().equals(item.getAsin())){
												item1.setIsMain("0");
											}else{
												item1.setIsMain(null);
											}
											break;
										}
									}
								}
								if(isNotExist){//add
									specialFlag=true;
									item.setProductNameColor(amazonProductService.findProductName(item.getAsin(),"com.inateck".equals(country.getName())?"com":country.getName()));
									
									try{
										String key=("com.inateck".equals(country.getName())?"com":country.getName())+"_"+item.getAsin();
										String priceStr=maxPriceMap.get(key);
										if(priceStr!=null){
											String[] arr=priceStr.split(",");
											if(Float.parseFloat(arr[1])>maxPrice){
												maxPrice=Float.parseFloat(arr[1]);
												maxPriceName=item.getProductNameColor();
											}
										}
										
										
										String minPriceStr=minPriceMap.get(key);
										if(minPriceStr!=null){
											String[] minArr=minPriceStr.split(",");
											if(minPrice==0){
												minPrice=Float.parseFloat(minArr[1]);
												minPriceName=item.getProductNameColor();
											}
											if(Float.parseFloat(minArr[1])<minPrice){
												minPrice=Float.parseFloat(minArr[1]);
												minPriceName=item.getProductNameColor();
											}
											String nameAndCountry=item.getProductNameColor()+"_"+("com.inateck".equals(country.getName())?"com":country.getName());
											if("4".equals(produPositionMap.get(nameAndCountry))){
												if(outMinPrice==0){
													outMinPrice=Float.parseFloat(minArr[1]);
												}
												if(Float.parseFloat(minArr[1])<outMinPrice){
													outMinPrice=Float.parseFloat(minArr[1]);
												}
											}else{
												if(saleMinPrice==0){
													saleMinPrice=Float.parseFloat(minArr[1]);
												}
												if(Float.parseFloat(minArr[1])<saleMinPrice){
													saleMinPrice=Float.parseFloat(minArr[1]);
												}
											}
										}
										
									}catch(Exception e){
										logger.error("price",e);
									}
									
									
									if(StringUtils.isNotBlank(newPromotion.getMainAsin())&&newPromotion.getMainAsin().equals(item.getAsin())){
										item.setIsMain("0");
									}else{
										item.setIsMain(null);
									}
									item.setWarning(promotion);
									promotion.getItems().add(item);
								}
								isNotExist=true;
							}
						}
						
						boolean isExist=false;
						if(promotion.getItems()!=null){
							for (AmazonPromotionsWarningItem item : promotion.getItems()) {
								if(newPromotion.getItems()!=null){
									for (AmazonPromotionsWarningItem item1 : newPromotion.getItems()) {
										if(item.getAsin().equals(item1.getAsin())){
											isExist=true;
											break;
										}
									}
								}
								if(!isExist&&StringUtils.isNotBlank(item.getAsin())){//delete
									item.setDelFlag("1");
									deleteSets.add(("com".equals(newPromotion.getCountry())?"US":newPromotion.getCountry().toUpperCase())+","+promotion.getPromotionId()+","+item.getProductNameColor()+"("+item.getAsin()+")");
								}
								item.setWarning(promotion);
								isExist=false;
							}
						}
						
						promotions.add(promotion);
						
						if("3".equals(promotion.getProType())&&specialFlag){//特批有变动
							Set<String> temp=allKindOfMap.get(promotion.getCountry());
							if(temp==null){
								temp=Sets.newHashSet();
								allKindOfMap.put(promotion.getCountry(),temp);
							}
							temp.add(promotion.getPromotionId()+",reason:特批折扣产品组有变动");
							continue;
						}
						
						
						if("F-JP A-Page BR1005 off 30% 2017-9-28 11:33:55,F-JP A-Page BP2003 off 20% 2017-9-28 8:34:48,F-JP A-Page LC1303 off 20% 2017-9-28 9:5:33,F-JP A-Page MP1300 off 10% 2017-9-28 9:19:10,F-JP A-Page SP1003 off 10% 2017-9-28 9:20:13,F-JP A-Page CB1001 off 20% 2017-9-28 9:21:6".contains(promotion.getPromotionId())){
							 continue;
						}
						
						if("C-DS1002-BATTERY-FREE-DE".equals(promotion.getPromotionId())){
							 continue;
						}
						if("F-US A-Page HB4101 off 42% 2017-3-2 15:54:32".equals(promotion.getPromotionId())){
							 continue;
						}
						
						
						if(!"Exclusive".equals(newPromotion.getClaimCodeCombinability())){
							Set<String> temp=allKindOfMap.get(promotion.getCountry());
							if(temp==null){
								temp=Sets.newHashSet();
								allKindOfMap.put(promotion.getCountry(),temp);
							}
							temp.add(promotion.getPromotionId()+",reason:Claim Code Combinability只能默认Exclusive");
							continue;
						}
						
						
						
						if(promotion.getPromotionId().startsWith("R-")&&!newPromotion.getBuyerGets().contains("Amount off")){//R-
							Set<String> temp=allKindOfMap.get(promotion.getCountry());
							if(temp==null){
								temp=Sets.newHashSet();
								allKindOfMap.put(promotion.getCountry(),temp);
							}
							temp.add(promotion.getPromotionId()+",reason:R-必须用amount off 折扣");
							continue;
						}
						
						
						
						if("For every quantity of items purchased".equals(newPromotion.getConditionType())){
							Set<String> temp=allKindOfMap.get(promotion.getCountry());
							if(temp==null){
								temp=Sets.newHashSet();
								allKindOfMap.put(promotion.getCountry(),temp);
							}
							temp.add(promotion.getPromotionId()+",reason:禁用For every quantity of items purchased");
							continue;
						}
						
						
						if("No".equals(newPromotion.getClaimCode())){
							if(StringUtils.isNotBlank(promotion.getRemark())&&promotion.getRemark().contains("成功结束")){
								continue;
							}
							Set<String> temp=claimMap.get(promotion.getCountry());
							if(temp==null){
								temp=Sets.newHashSet();
								claimMap.put(promotion.getCountry(),temp);
							}
							temp.add(promotion.getPromotionId());
							continue;
						}
						
						
						if(promotion.getBuyerGets().contains("Post-order benefit")){
							continue;
						}
						
						try{
							if("At least this quantity of items".contains(newPromotion.getConditionType())&&newPromotion.getBuyerGets().contains("Free items")
									&&promotion.getCreateDate().after(new SimpleDateFormat("yyyy-MM-dd").parse("2017-07-24"))){
								if(newPromotion.getTempQuantity()>newPromotion.getQuantity()){
									    if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
											Set<String> temp=specialMap.get(promotion.getCountry());
											if(temp==null){
												temp=Sets.newHashSet();
												specialMap.put(promotion.getCountry(),temp);
											}
											temp.add(promotion.getPromotionId()+",reason:赠送产品数量大于购买数量");
											continue;
										 }	
								}
							}
						}catch(Exception e){
							logger.info("free items",e.getMessage());
						}
						
						
						if("3".equals(promotion.getProType())&&promotion.getCreateDate().before(new SimpleDateFormat("yyyy-MM-dd").parse("2016-11-28"))){
							continue;
						}
						
						if(!"3".equals(promotion.getProType())){
							if("de,ca,uk,fr,es,it".contains(promotion.getCountry())&&"Entire catalogue".equals(promotion.getPurchasedItems())){
								if(StringUtils.isNotBlank(promotion.getRemark())&&promotion.getRemark().contains("成功结束")){
									continue;
								}
								List<AmazonPromotionsWarning> tempList=map.get(promotion.getCountry());
								if(tempList==null){
									tempList=Lists.newArrayList();
									map.put(promotion.getCountry(), tempList);
								}
								tempList.add(promotion);
								continue;
							}else if("jp,com".contains(promotion.getCountry())&&"Entire catalog".equals(promotion.getPurchasedItems())){
								if(StringUtils.isNotBlank(promotion.getRemark())&&promotion.getRemark().contains("成功结束")){
									continue;
								}
								List<AmazonPromotionsWarning> tempList=map.get(promotion.getCountry());
								if(tempList==null){
									tempList=Lists.newArrayList();
									map.put(promotion.getCountry(), tempList);
								}
								tempList.add(promotion);
								continue;
							}
						}
						
						//买一送一start
						if(promotion.getBuyerGets().contains("Free items")&&!"3".equals(promotion.getProType())){
							String qualifyingItem=promotion.getQualifyingItem();
							String qualifyingItemKey=("com.inateck".equals(country.getName())?"com":country.getName())+"_"+qualifyingItem;
							String priceStr=minPriceMap.get(qualifyingItemKey);
							if(minPrice>0&&priceStr!=null){
								String[] arr=priceStr.split(",");
								Float price=Float.parseFloat(arr[1]);
					            if(price>minPrice){
					            	if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
										
										Set<String> temp=specialMap.get(promotion.getCountry());
										if(temp==null){
											temp=Sets.newHashSet();
											specialMap.put(promotion.getCountry(),temp);
										}
										temp.add(promotion.getPromotionId()+",reason:买一送一免费赠送产品 "+qualifyingItem+" 售价 "+price+" 大于购买产品 "+minPriceName+" 最低价 "+minPrice);
									 }
					            }
							}	
							continue;
						}
						//买一送一end
						
						try{
									if(promotion.getCreateDate().after(new SimpleDateFormat("yyyy-MM-dd").parse("2016-09-14"))){
											if(promotion.getPromotionId().startsWith("R-")&&!"Single-use claim code required".equals(newPromotion.getPromotionCode())){//R-
												Set<String> temp=allKindOfMap.get(promotion.getCountry());
												if(temp==null){
													temp=Sets.newHashSet();
													allKindOfMap.put(promotion.getCountry(),temp);
												}
												temp.add(promotion.getPromotionId()+",reason:R-必须用Single Use Code");
												continue;
											}
									}
			                        
			                        if(promotion.getCreateDate().before(new SimpleDateFormat("yyyy-MM-dd").parse("2016-09-11"))){
			                        	  continue;
			                        }
			                        
									if(StringUtils.isNotBlank(newPromotion.getMainAsin())){
										String key=("com.inateck".equals(country.getName())?"com":country.getName())+"_"+newPromotion.getMainAsin();
										
										
										String priceStr=maxPriceMap.get(key);
										if(priceStr==null){
											continue;
										}
										String[] arr=priceStr.split(",");
										Float mainAsinPrice=Float.parseFloat(arr[1]);
										if(mainAsinPrice==null||mainAsinPrice<=0){
											continue;
										}
										Float purchase=newPromotion.getPurchaseQuantity();
										Float offPrice=newPromotion.getAmountOffPrice();
										String tempName=amazonProductService.findProductName(newPromotion.getMainAsin(),"com.inateck".equals(country.getName())?"com":country.getName());
										
										String nameKey=tempName+"_"+("com.inateck".equals(country.getName())?"com":country.getName());
										
										
										
										
										Float minCodePrice=safePriceMap.get(nameKey);
										if(minCodePrice==null){
											continue;
										}
										
										if(promotion.getPromotionId().startsWith("F-")&&promotion.getCreateDate().after(new SimpleDateFormat("yyyy-MM-dd").parse("2016-12-28"))){
											/*普通品：不能低于保本价的7折
											新品：不能低于保本价的5折
											淘汰品：不能低于保本价的3折*/
											//String nameKeyType="0".equals(isSaleMap.get(nameKey))?"淘汰":("0".equals(productIsNewMap.get(nameKey))?"普通":"新品");
											String buyerGets=newPromotion.getBuyerGets();
										    String buyerPurchase=newPromotion.getBuyerPurchases();
											Float proBuyerGets=Float.parseFloat(newPromotion.getBuyerGets().substring(newPromotion.getBuyerGets().lastIndexOf(" ")).trim().replace(",", "."));
										    Float proBuyerPurchase=Float.parseFloat(newPromotion.getBuyerPurchases().substring(newPromotion.getBuyerPurchases().lastIndexOf(" ")).trim().replace(",", "."));
											Float promotionsPrice=0f;
											if(buyerGets.contains("Amount off")&&buyerPurchase.contains("At least this quantity of items")){
												promotionsPrice=mainAsinPrice-proBuyerGets/proBuyerPurchase;
											}else if(buyerGets.contains("Amount off")&&buyerPurchase.contains("At least amount")){
												promotionsPrice=mainAsinPrice*(1-proBuyerGets/proBuyerPurchase);
											}else{
												promotionsPrice=mainAsinPrice*(100-proBuyerGets)/100;
											}
											if("4".equals(produPositionMap.get(nameKey))){//淘汰
												if(promotionsPrice/minCodePrice<0.3){
													 Set<String> temp=allKindOfMap.get(promotion.getCountry());
													  if(temp==null){
															temp=Sets.newHashSet();
															allKindOfMap.put(promotion.getCountry(),temp);
													  }
													 temp.add(promotion.getPromotionId()+",reason:淘汰品不能低于保本价的3折,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
													 continue;
												}
											}else if("0".equals(productIsNewMap.get(nameKey))){//普通
												if(promotionsPrice/minCodePrice<0.5){
													 Set<String> temp=allKindOfMap.get(promotion.getCountry());
													  if(temp==null){
															temp=Sets.newHashSet();
															allKindOfMap.put(promotion.getCountry(),temp);
													  }
													 temp.add(promotion.getPromotionId()+",reason:普通品不能低于保本价的5折,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
													 continue;
												}
											}else{//新品
												if(promotionsPrice/minCodePrice<0.5){
													 Set<String> temp=allKindOfMap.get(promotion.getCountry());
													  if(temp==null){
															temp=Sets.newHashSet();
															allKindOfMap.put(promotion.getCountry(),temp);
													  }
													 temp.add(promotion.getPromotionId()+",reason:新品不能低于保本价的5折,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
													 continue;
												}
											}
										}
										
										if("3".equals(promotion.getProType())){
											 continue; 
										}
										
										if(!"3".equals(promotion.getProType())&&promotion.getPromotionId().startsWith("R-")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){//R-
												if(offPrice/purchase>MathUtils.roundUp(mainAsinPrice*1d)){
														  if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
															  Set<String> temp=specialMap.get(promotion.getCountry());
																if(temp==null){
																	temp=Sets.newHashSet();
																	specialMap.put(promotion.getCountry(),temp);
																}
																temp.add(promotion.getPromotionId()+",reason:减免金额不能高于最高单价,产品("+newPromotion.getMainAsin()+")"+tempName+"价格"+MathUtils.roundUp(mainAsinPrice*1d));
																
														  }
													  continue;
												}
										}else if("3".equals(promotion.getProType())&&promotion.getPromotionId().startsWith("R-")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){//R-
											if(offPrice/purchase>MathUtils.roundUp(mainAsinPrice*1d)){
												 if((StringUtils.isBlank(promotion.getSpecialCheckUser())||(StringUtils.isNotBlank(promotion.getSpecialCheckUser())&&!promotion.getSpecialCheckUser().contains(",")))){
													 Set<String> temp=warnMap.get(promotion.getCountry());
														if(temp==null){
															temp=Sets.newHashSet();
															warnMap.put(promotion.getCountry(),temp);
														}
														temp.add(promotion.getPromotionId()+",reason:减免金额不能高于最高单价,产品("+newPromotion.getMainAsin()+")"+tempName+"价格"+MathUtils.roundUp(mainAsinPrice*1d));
														continue; 
												 }
											}
										}
										
										
										
										if(promotion.getPromotionId().startsWith("C-")){//不能亏本 就最低折扣价格-保本价

											if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){
												if(mainAsinPrice-offPrice/purchase-minCodePrice<0){
														 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																
														   Set<String> temp=specialMap.get(promotion.getCountry());
															if(temp==null){
																temp=Sets.newHashSet();
																specialMap.put(promotion.getCountry(),temp);
															}
															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
														 }
													
													continue;
												}
											}else if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least amount")){
												if(mainAsinPrice-mainAsinPrice*(offPrice/purchase)-minCodePrice<0){
													
														 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																
															Set<String> temp=specialMap.get(promotion.getCountry());
															if(temp==null){
																temp=Sets.newHashSet();
																specialMap.put(promotion.getCountry(),temp);
															}
															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
														 }
													
													continue;
												}
											}else{
												if(mainAsinPrice-mainAsinPrice*offPrice/100-minCodePrice<0){
														 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																
															Set<String> temp=specialMap.get(promotion.getCountry());
															if(temp==null){
																temp=Sets.newHashSet();
																specialMap.put(promotion.getCountry(),temp);
															}
															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
														 }
													
													continue;
												}
												
											}
										}
										
										if(!"3".equals(promotion.getProType())){
											if(promotion.getPromotionId().startsWith("F-")){//(折扣价-保本价) /保本价  按利润：非淘汰 亏本 ≧15% 淘汰品 亏本 ≧ 50% Alice或Maya 审核
												//淘汰
												if("2".equals(promotion.getProType())){//有利润促销
													if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){
														if(mainAsinPrice-offPrice/purchase-minCodePrice<0){
																 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																		
																	Set<String> temp=specialMap.get(promotion.getCountry());
																	if(temp==null){
																		temp=Sets.newHashSet();
																		specialMap.put(promotion.getCountry(),temp);
																	}
																	temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品("+newPromotion.getMainAsin()+")无利润"+tempName+"最低价:"+mainAsinPrice);
																 }	
														
															continue;
														}
													}else if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least amount")){
														if(mainAsinPrice-mainAsinPrice*(offPrice/purchase)-minCodePrice<0){
																 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																		
																	Set<String> temp=specialMap.get(promotion.getCountry());
																	if(temp==null){
																		temp=Sets.newHashSet();
																		specialMap.put(promotion.getCountry(),temp);
																	}
																	temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品("+newPromotion.getMainAsin()+")无利润"+tempName+"最低价:"+mainAsinPrice);
																 }	
															
															continue;
														}
													}else{
														if(mainAsinPrice-mainAsinPrice*offPrice/100-minCodePrice<0){
	                                                    	   if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
	       														
		                                                    		Set<String> temp=specialMap.get(promotion.getCountry());
		    														if(temp==null){
		    															temp=Sets.newHashSet();
		    															specialMap.put(promotion.getCountry(),temp);
		    														}
		    														temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品("+newPromotion.getMainAsin()+")无利润"+tempName+"最低价:"+mainAsinPrice);
		                                                    	 }
															
														continue;
														}
														
													}
												}else{
													String nameAndCountry=tempName+"_"+("com.inateck".equals(country.getName())?"com":country.getName());
													if(!"4".equals(produPositionMap.get(nameAndCountry))){//在售
														if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){
															if((minCodePrice-(mainAsinPrice-offPrice/purchase))*100/minCodePrice>=15){
																	 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																			
																		Set<String> temp=specialMap.get(promotion.getCountry());
																		if(temp==null){
																			temp=Sets.newHashSet();
																			specialMap.put(promotion.getCountry(),temp);
																		}
																		temp.add(promotion.getPromotionId()+",reason:非淘汰亏本 ≧15%,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
																	 }	
																
																continue;
															}
														}else if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least amount")){
															if((minCodePrice-(mainAsinPrice-mainAsinPrice*(offPrice/purchase)))*100/minCodePrice>=15){
																	 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																			
																		Set<String> temp=specialMap.get(promotion.getCountry());
																		if(temp==null){
																			temp=Sets.newHashSet();
																			specialMap.put(promotion.getCountry(),temp);
																		}
																		temp.add(promotion.getPromotionId()+",reason:非淘汰亏本 ≧15%,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
																	 }	
																
																continue;
															}
														}else{
															if((minCodePrice-(mainAsinPrice-mainAsinPrice*offPrice/100))*100/minCodePrice>=15){
																	 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																			
																		Set<String> temp=specialMap.get(promotion.getCountry());
																		if(temp==null){
																			temp=Sets.newHashSet();
																			specialMap.put(promotion.getCountry(),temp);
																		}
																		temp.add(promotion.getPromotionId()+",reason:非淘汰亏本 ≧15%,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
																	 }	
																
																continue;
															}
															
														}
													}else{
														if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){
															if((minCodePrice-(mainAsinPrice-offPrice/purchase))*100/minCodePrice>=50){
																	 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																			
																			Set<String> temp=specialMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				specialMap.put(promotion.getCountry(),temp);
																			}
																			temp.add(promotion.getPromotionId()+",reason:淘汰品亏本 ≧ 50%,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
																	 }		
																
																continue;
															}
														}else if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least amount")){
															if((minCodePrice-(mainAsinPrice-mainAsinPrice*(offPrice/purchase)))*100/minCodePrice>=50){
																	 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																			
																			Set<String> temp=specialMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				specialMap.put(promotion.getCountry(),temp);
																			}
																			temp.add(promotion.getPromotionId()+",reason:淘汰品亏本 ≧ 50%,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
																	 }	
																
															continue;
															}
														}else{
															if((minCodePrice-(mainAsinPrice-mainAsinPrice*offPrice/100))*100/minCodePrice>=50){
																	 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																			
																			Set<String> temp=specialMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				specialMap.put(promotion.getCountry(),temp);
																			}
																			temp.add(promotion.getPromotionId()+",reason:淘汰品亏本 ≧ 50%,产品("+newPromotion.getMainAsin()+")"+tempName+"最低价:"+mainAsinPrice);
																	 }		
															
																continue;
															}
															
														}
													}
												}
											}
										}
									}else{//非买A折B
										String buyerGets=newPromotion.getBuyerGets();
									    String buyerPurchase=newPromotion.getBuyerPurchases();
										Float offPrice=null;
										Float purchase=null;
										try{
											offPrice=Float.parseFloat(newPromotion.getBuyerGets().substring(newPromotion.getBuyerGets().lastIndexOf(" ")).trim().replace(",", "."));
											purchase=Float.parseFloat(newPromotion.getBuyerPurchases().substring(newPromotion.getBuyerPurchases().lastIndexOf(" ")).trim().replace(",", "."));
										}catch(Exception e){
											continue;
										}

									    if(maxPrice!=null&&maxPrice>0&&promotion.getPromotionId().startsWith("R-")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){//R-
											if(offPrice/purchase>MathUtils.roundUp(maxPrice*1d)){
													 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
													    Set<String> temp=specialMap.get(promotion.getCountry());
														if(temp==null){
															temp=Sets.newHashSet();
															specialMap.put(promotion.getCountry(),temp);
														}
														temp.add(promotion.getPromotionId()+",reason:减免金额不能高于最高单价,产品"+maxPriceName+"最高价"+MathUtils.roundUp(maxPrice*1d));
													 }else{
													    Set<String> temp=allKindOfMap.get(promotion.getCountry());
														if(temp==null){
															temp=Sets.newHashSet();
															allKindOfMap.put(promotion.getCountry(),temp);
														}
														temp.add(promotion.getPromotionId()+",reason:减免金额不能高于最高单价,产品"+maxPriceName+"最高价"+MathUtils.roundUp(maxPrice*1d));
												    }
												continue;
											}
										}//R-
									    
									    boolean flag=false;
									    if(newPromotion.getItems()!=null){
									    	for (AmazonPromotionsWarningItem item : newPromotion.getItems()) {
												if(StringUtils.isNotBlank(item.getProductNameColor())){
													Float promotionsPrice=0f;
													String priceKey=newPromotion.getCountry()+"_"+item.getAsin();
													Float mainAsinPrice=priceMap.get(priceKey);
													String key=item.getProductNameColor()+"_"+("com.inateck".equals(country.getName())?"com":country.getName());
													Float minCodePrice=safePriceMap.get(key);
													String nameKey=item.getProductNameColor()+"_"+promotion.getCountry();
													if(minCodePrice==null){
														continue;
													}
													if(mainAsinPrice!=null){
														if(promotion.getCreateDate().after(new SimpleDateFormat("yyyy-MM-dd").parse("2016-12-28"))&&promotion.getPromotionId().startsWith("F-")){
															if(buyerGets.contains("Amount off")&&buyerPurchase.contains("At least this quantity of items")){
																promotionsPrice=mainAsinPrice-offPrice/purchase;
															}else if(buyerGets.contains("Amount off")&&buyerPurchase.contains("At least amount")){
																promotionsPrice=mainAsinPrice*(1-offPrice/purchase);
															}else{
																promotionsPrice=mainAsinPrice*(100-offPrice)/100;
															}
															if("4".equals(produPositionMap.get(nameKey))){//淘汰
																if(promotionsPrice/minCodePrice<0.3){
																	 Set<String> temp=allKindOfMap.get(promotion.getCountry());
																	  if(temp==null){
																			temp=Sets.newHashSet();
																			allKindOfMap.put(promotion.getCountry(),temp);
																	  }
																	 temp.add(promotion.getPromotionId()+",reason:淘汰品不能低于保本价的3折,产品("+item.getAsin()+")"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																	 flag=true;
																	 break;
																}
															}else if("0".equals(productIsNewMap.get(nameKey))){//普通
																if(promotionsPrice/minCodePrice<0.5){
																	 Set<String> temp=allKindOfMap.get(promotion.getCountry());
																	  if(temp==null){
																			temp=Sets.newHashSet();
																			allKindOfMap.put(promotion.getCountry(),temp);
																	  }
																	 temp.add(promotion.getPromotionId()+",reason:普通品不能低于保本价的5折,产品("+item.getAsin()+")"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																	 flag=true;
																	 break;
																}
															}else{//新品
																if(promotionsPrice/minCodePrice<0.5){
																	 Set<String> temp=allKindOfMap.get(promotion.getCountry());
																	  if(temp==null){
																			temp=Sets.newHashSet();
																			allKindOfMap.put(promotion.getCountry(),temp);
																	  }
																	 temp.add(promotion.getPromotionId()+",reason:新品不能低于保本价的5折,产品("+item.getAsin()+")"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																	 flag=true;
																	 break;
																}
															}
														}//2016-12-28
														
														
														if(promotion.getCreateDate().before(new SimpleDateFormat("yyyy-MM-dd").parse("2017-01-04"))){
								                        	  continue;
								                        }
														 
														if(!"3".equals(promotion.getProType())){//非特批
															if(promotion.getPromotionId().startsWith("C-")||(promotion.getPromotionId().startsWith("F-")&&"2".equals(promotion.getProType()))){//不能亏本 就最低折扣价格-保本价
																if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){
																	if(mainAsinPrice-offPrice/purchase-minCodePrice<0){
				                                                       if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
					                                                        	Set<String> temp=specialMap.get(promotion.getCountry());
					     														if(temp==null){
					     															temp=Sets.newHashSet();
					     															specialMap.put(promotion.getCountry(),temp);
					     														}
					     														if(promotion.getPromotionId().startsWith("C-")){
					     															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
					     														}else{
					     															temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品"+item.getProductNameColor()+"无利润,最低价:"+mainAsinPrice);
					     														}
				                                                       }else{
																			Set<String> temp=allKindOfMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				allKindOfMap.put(promotion.getCountry(),temp);
																			}
																			if(promotion.getPromotionId().startsWith("C-")){
				     															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
				     														}else{
				     															temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品"+item.getProductNameColor()+"无利润,最低价:"+mainAsinPrice);
				     														}
																		}
																		 flag=true;
																		 break;
																	}
																}else if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least amount")){
																	if(mainAsinPrice-mainAsinPrice*(offPrice/purchase)-minCodePrice<0){
				                                                        if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
					                                                        	Set<String> temp=specialMap.get(promotion.getCountry());
					    														if(temp==null){
					    															temp=Sets.newHashSet();
					    															specialMap.put(promotion.getCountry(),temp);
					    														}
					    														if(promotion.getPromotionId().startsWith("C-")){
					     															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
					     														}else{
					     															temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品"+item.getProductNameColor()+"无利润,最低价:"+mainAsinPrice);
					     														}
				                                                        }else{
																			Set<String> temp=allKindOfMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				allKindOfMap.put(promotion.getCountry(),temp);
																			}
																			if(promotion.getPromotionId().startsWith("C-")){
				     															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
				     														}else{
				     															temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品"+item.getProductNameColor()+"无利润,最低价:"+mainAsinPrice);
				     														}
																			
																		}
																	 flag=true;
																	 break;
																	}
																}else{
																	if(mainAsinPrice-mainAsinPrice*offPrice/100-minCodePrice<0){
				                                                         if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
						                                                        	Set<String> temp=specialMap.get(promotion.getCountry());
						    														if(temp==null){
						    															temp=Sets.newHashSet();
						    															specialMap.put(promotion.getCountry(),temp);
						    														}
						    														if(promotion.getPromotionId().startsWith("C-")){
						     															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
						     														}else{
						     															temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品"+item.getProductNameColor()+"无利润,最低价:"+mainAsinPrice);
						     														}
				                                                        }else{
																			Set<String> temp=allKindOfMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				allKindOfMap.put(promotion.getCountry(),temp);
																			}
																			if(promotion.getPromotionId().startsWith("C-")){
				     															temp.add(promotion.getPromotionId()+",reason:C-不能亏本,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
				     														}else{
				     															temp.add(promotion.getPromotionId()+",reason:F-有利润促销,产品"+item.getProductNameColor()+"无利润,最低价:"+mainAsinPrice);
				     														}
																		}
																	 flag=true;
																	 break;
																  }
																}
															}//不能亏本
															
															if(promotion.getPromotionId().startsWith("F-")&&!"2".equals(promotion.getProType())){
																Integer pecentNum=15;
																if("4".equals(produPositionMap.get(nameKey))){//淘汰
																	 pecentNum=50;
																}
																if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least this quantity of items")){
																	if((minCodePrice-(mainAsinPrice-offPrice/purchase))*100d/minCodePrice>=pecentNum){
																			 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																					
																				Set<String> temp=specialMap.get(promotion.getCountry());
																				if(temp==null){
																					temp=Sets.newHashSet();
																					specialMap.put(promotion.getCountry(),temp);
																				}
																				temp.add(promotion.getPromotionId()+",reason:"+("4".equals(produPositionMap.get(nameKey))?"淘汰品亏本":"非淘汰品亏本")+"≧ "+pecentNum+"%,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																		}else{
																			Set<String> temp=allKindOfMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				allKindOfMap.put(promotion.getCountry(),temp);
																			}
																			temp.add(promotion.getPromotionId()+",reason:"+("4".equals(produPositionMap.get(nameKey))?"淘汰品亏本":"非淘汰品亏本")+"≧ "+pecentNum+"%,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																			
																		}
																			 flag=true;
																			 break;
																	}
																}else if(newPromotion.getBuyerGets().contains("Amount off")&&newPromotion.getBuyerPurchases().contains("At least amount")){
																	if((minCodePrice-(mainAsinPrice-mainAsinPrice*(offPrice/purchase)))*100d/minCodePrice>=pecentNum){
																		 if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																				Set<String> temp=specialMap.get(promotion.getCountry());
																				if(temp==null){
																					temp=Sets.newHashSet();
																					specialMap.put(promotion.getCountry(),temp);
																				}
																				temp.add(promotion.getPromotionId()+",reason:"+("4".equals(produPositionMap.get(nameKey))?"淘汰品亏本":"非淘汰品亏本")+"≧"+pecentNum+"%,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																		}else{
																			Set<String> temp=allKindOfMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				allKindOfMap.put(promotion.getCountry(),temp);
																			}
																			temp.add(promotion.getPromotionId()+",reason:"+("4".equals(produPositionMap.get(nameKey))?"淘汰品亏本":"非淘汰品亏本")+"≧ "+pecentNum+"%,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																			
																		}
																		 flag=true;
																		 break;
																	}
																}else{
																	if((minCodePrice-(mainAsinPrice-mainAsinPrice*offPrice/100d))*100d/minCodePrice>=pecentNum){
																		if(promotion.getLastCheckDate()==null||(promotion.getLastCheckDate()!=null&&promotion.getLastCheckDate().before(DateUtils.addDays(new Date(),-30)))){
																				Set<String> temp=specialMap.get(promotion.getCountry());
																				if(temp==null){
																					temp=Sets.newHashSet();
																					specialMap.put(promotion.getCountry(),temp);
																				}
																				temp.add(promotion.getPromotionId()+",reason:"+("4".equals(produPositionMap.get(nameKey))?"淘汰品亏本":"非淘汰品亏本")+"≧ "+pecentNum+"%,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																		}else{
																			Set<String> temp=allKindOfMap.get(promotion.getCountry());
																			if(temp==null){
																				temp=Sets.newHashSet();
																				allKindOfMap.put(promotion.getCountry(),temp);
																			}
																			temp.add(promotion.getPromotionId()+",reason:"+("4".equals(produPositionMap.get(nameKey))?"淘汰品亏本":"非淘汰品亏本")+"≧ "+pecentNum+"%,产品"+item.getProductNameColor()+"最低价:"+mainAsinPrice);
																			
																		}
																		 flag=true;
																		 break;
																	}
																	
																}
															}
														}//非特批
													}//mainAsinPrice
													
												}
										    }
									    }
										
										if(flag){
											continue;
										}
								    }
							}catch(Exception e){
								logger.error(e.getMessage(),e);
							}

					}
				}
				if(promotions!=null&&promotions.size()>0){
					amazonPromotionsWarningService.save(promotions);
				}
			}
			
			if(isActiveList!=null&&isActiveList.size()>0){
				amazonPromotionsWarningService.updateIsActive(isActiveList,"com.inateck".equals(country.getName())?"com":country.getName());
			}
			//Single-use claim code required
			
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
		}finally{
			LoginUtil.closeClient(client, country.getSuffix());
			AmzLoginPool.returnClient(country.getName(), client);
		}
	}
	
	public void scannerData(String email,CountryType country,AmazonPromotionsWarningService amazonPromotionsWarningService,AmazonProductService amazonProductService,String loginName,PsiProductService productService,final MailManager manager){
		logger.info("手动同步折扣开始");
		WebClient  client = LoginUtil.register(country.getName(),false);
		if(client==null){
			logger.error("login error"+country.getName());
			try{
				WeixinSendMsgUtil.sendTextMsgToUser(loginName,"模拟登陆失败,不能获取最新折扣信息");
			}catch(Exception e){
				logger.error("cross帖微信发送账号错误异常！",e);
			}
			throw new RuntimeException("login error"+country.getName());
		}
		Set<String> deleteSets=Sets.newHashSet();
		WebRequest req = null;
		try {
			Map<String,String> results = new LinkedHashMap<String,String>();
			req = new WebRequest(new URL("https://sellercentral.amazon."+country.getSuffix()+"/promotions/manage/refresh/ref=xx_xx_pgnb_xx?searchType=status&statusSearchType=active"), HttpMethod.POST);
			req.setAdditionalHeader("X-Requested-With", "XMLHttpRequest");
			req.setAdditionalHeader("Content-Type", "application/json");
			int i =1;
			while(true){
				String requestBody = "{\"action\":\"PAGE_CHANGED\",\"pageNumber\":"+i+",\"recordsPerPage\":null,\"sortedColumnId\":\"endDateField\",\"sortOrder\":\"ASCENDING\",\"tableId\":\"managepromotionstable\",\"filters\":[],\"clientState\":{}}";
				req.setRequestBody(requestBody);
				HtmlPage page = client.getPage(req);
				//截取Id
				String content = page.asXml();
				Matcher matcher = pattern.matcher(content);
				boolean flag = true;
				while(matcher.find()){
					flag = false;
					String a = matcher.group();
					Document doc = Jsoup.parse(a);
					Element ele = doc.getElementsByTag("a").get(0);
					String href=ele.attr("href");
					String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
					
					results.put(trackId, ele.attr("href"));
				}
				if(flag){
					if(results.size()==0){
						logger.info(page.asText());
					}
					break;
				}
				i++;
			}
			logger.info("count:"+results.size()+"!!!"+results);
			
			req = new WebRequest(new URL("https://sellercentral.amazon."+country.getSuffix()+"/promotions/manage/refresh/ref=xx_xx_pgnb_xx?searchType=status&statusSearchType=PENDING"), HttpMethod.POST);
			req.setAdditionalHeader("X-Requested-With", "XMLHttpRequest");
			req.setAdditionalHeader("Content-Type", "application/json");
			int ii =1;
			while(true){
				String requestBody = "{\"action\":\"PAGE_CHANGED\",\"pageNumber\":"+ii+",\"recordsPerPage\":null,\"sortedColumnId\":\"endDateField\",\"sortOrder\":\"ASCENDING\",\"tableId\":\"managepromotionstable\",\"filters\":[],\"clientState\":{}}";
				req.setRequestBody(requestBody);
				HtmlPage page = client.getPage(req);
				//截取Id
				String content = page.asXml();
				Matcher matcher = pattern.matcher(content);
				boolean flag = true;
				while(matcher.find()){
					flag = false;
					String a = matcher.group();
					Document doc = Jsoup.parse(a);
					Element ele = doc.getElementsByTag("a").get(0);
					String href=ele.attr("href");
					String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
					
					results.put(trackId, ele.attr("href"));
				}
				if(flag){
					break;
				}
				ii++;
			}
			logger.info("count:"+results.size()+"!!!"+results);
			
			int num1=0;
			int num2=0;
			List<String> isActiveList=Lists.newArrayList();
			List<AmazonPromotionsWarning> tempList=Lists.newArrayList();
			Set<String> claimCodeSet=Sets.newHashSet();
			Set<String> noExistsSet=Sets.newHashSet();
			
			if(results.size()>0){
				List<AmazonPromotionsWarning> promotions = new ArrayList<AmazonPromotionsWarning>();
				for (Entry<String, String> entry : results.entrySet()) {
					Integer promotionsId=amazonPromotionsWarningService.isNotExist(entry.getKey(),"com.inateck".equals(country.getName())?"com":country.getName());
					if(promotionsId==null){
						AmazonPromotionsWarning newPromotion=getPromotionDetails(client,country.getName(), entry.getKey(),entry.getValue(),num1);
						if(newPromotion==null){
							continue;
						}
						if(newPromotion.getStartDate().equals(newPromotion.getEndDate())){
                        	continue;
					    }
						noExistsSet.add(entry.getKey());
					}else if(promotionsId!=null){//edit
						AmazonPromotionsWarning promotion=amazonPromotionsWarningService.get(promotionsId);
						if(promotion==null){
							 promotion=amazonPromotionsWarningService.getById(promotionsId);
						}
						if("R-JP deal ST1009 off 999 2017-4-21 11:35:12".equals(promotion.getPromotionId())){
							continue;
						}
						AmazonPromotionsWarning newPromotion=getPromotionDetails(client,country.getName(), entry.getKey(),entry.getValue(),num2);
						if(newPromotion==null){
							logger.info("newPromotion没获取到");
							isActiveList.add(promotion.getPromotionId());
							continue;
						}
						if(newPromotion.getStartDate()!=null&&newPromotion.getStartDate().equals(newPromotion.getEndDate())){
                        	continue;
					    }
						
					
						if("F-DE A-Page P6 off 1 2017-4-20 10:56:27".equals(promotion.getPromotionId())||"F-DE A-Page P6 off 9.9 2017-4-25 10:50:20".equals(promotion.getPromotionId())
								||"F-US A-Page UCC1001US off 1% 2017-5-19 17:31:5".equals(promotion.getPromotionId())
								||"F-US A-Page UCC1001US off 1% 2017-5-19 17:30:0".equals(promotion.getPromotionId())
								||"S-DE A-Page P6 off BCST-S 2017-6-7 9:39:5".equals(promotion.getPromotionId())	
								||"S-UK A-Page P6 off BCST-S 2017-6-7 9:18:9".equals(promotion.getPromotionId())
								||"S-FR A-Page P6 off BCST-S 2017-6-7 9:48:54".equals(promotion.getPromotionId())		
								||"S-IT A-Page P6 off BCST-S 2017-6-7 9:55:59".equals(promotion.getPromotionId())		
								||"S-ES A-Page P6 off BCST-S 2017-6-7 10:3:14".equals(promotion.getPromotionId())
								||"F-JP A-Page BR1005 BR1003 BP1109 off 30% 2017-12-15 14:17:17".equals(promotion.getPromotionId())
								||"F-JP A-Page AD2001 AD2002 FD2002 off 10% 2017-12-15 14:51:21".equals(promotion.getPromotionId())
								||"F-JP A-Page BK2001 BK2003 BK2005 off 20% 2017-12-15 14:38:40".equals(promotion.getPromotionId())){
							 continue;
						}
						/*if("3".equals(promotion.getWarningSta())){//草稿关闭
							noExistsSet.add(entry.getKey());
							continue;
						}
						*/
						promotion.setStartDate(newPromotion.getStartDate());
						promotion.setEndDate(newPromotion.getEndDate());
						promotion.setBuyerPurchases(newPromotion.getBuyerPurchases());
						promotion.setBuyerGets(newPromotion.getBuyerGets());
						promotion.setPurchasedItems(newPromotion.getPurchasedItems());
						promotion.setPromotion(newPromotion.getPromotion());
						promotion.setOneRedemption(newPromotion.getOneRedemption());
						promotion.setPromotionCode(newPromotion.getPromotionCode());
						promotion.setUpdateDate(new Date());
						promotion.setQualifyingItem(newPromotion.getQualifyingItem());
						//boolean compareFlag=false;
						boolean isExist=false;
						if(promotion.getItems()!=null){
							for (AmazonPromotionsWarningItem item : promotion.getItems()) {
								if(newPromotion.getItems()!=null){
									for (AmazonPromotionsWarningItem item1 : newPromotion.getItems()) {
										if(item.getAsin().equals(item1.getAsin())){
											isExist=true;
											break;
										}
									}
								}
								if(!isExist){//delete
									item.setDelFlag("1");
									if(StringUtils.isNotBlank(item.getProductNameColor())){
										deleteSets.add(("com".equals(newPromotion.getCountry())?"US":newPromotion.getCountry().toUpperCase())+","+promotion.getPromotionId()+","+item.getProductNameColor()+"("+item.getAsin()+")");
									}
									//compareFlag=true;
								}
								item.setWarning(promotion);
								isExist=false;
							}
						}
						
						
						boolean isNotExist=true;
						if(newPromotion.getItems()!=null){
 							for (AmazonPromotionsWarningItem item : newPromotion.getItems()) {
								if(promotion.getItems()!=null){
									for (AmazonPromotionsWarningItem item1 : promotion.getItems()) {
										if(item.getAsin().equals(item1.getAsin())){
											isNotExist=false;
											break;
										}
									}
								}
								if(isNotExist){//add
									item.setProductNameColor(amazonProductService.findProductName(item.getAsin(),"com.inateck".equals(country.getName())?"com":country.getName()));
									promotion.getItems().add(item);
									item.setWarning(promotion);
									//compareFlag=true;
								}
								isNotExist=true;
							}
						}
						
						isActiveList.add(promotion.getPromotionId());
						
						/*if("F-all products off 15% 4.25-6.25".equals(promotion.getPromotionId())||"F-ALL-WHATSAPP-OFF10-DE".equals(promotion.getPromotionId())){
							continue;
						}*/
						if(promotion.getStartDate().equals(promotion.getEndDate())){
	                        	continue;
						}
						
						if("F-US A-Page HB4101 off 42% 2017-3-2 15:54:32".equals(promotion.getPromotionId())){
							 continue;
						}
						

						
						if("F-JP A-Page BR1005 off 30% 2017-9-28 11:33:55,F-JP A-Page BP2003 off 20% 2017-9-28 8:34:48,F-JP A-Page LC1303 off 20% 2017-9-28 9:5:33,F-JP A-Page MP1300 off 10% 2017-9-28 9:19:10,F-JP A-Page SP1003 off 10% 2017-9-28 9:20:13,F-JP A-Page CB1001 off 20% 2017-9-28 9:21:6".contains(promotion.getPromotionId())){
							 continue;
						}
						
						
						if("No".equals(newPromotion.getClaimCode())&&!"S-US A-Page AD2002 off DB2001 2017-6-7 17:39:15".equals(promotion.getPromotionId())){
							if(StringUtils.isNotBlank(promotion.getRemark())&&promotion.getRemark().contains("成功结束")){
								continue;
							}
							claimCodeSet.add(promotion.getPromotionId());
							continue;
						}
						if("3".equals(promotion.getProType())){
							continue;
						}
						//if(!promotion.getPromotionId().startsWith("web promo-")){
							if("de,ca,uk,fr,es,it".contains(promotion.getCountry())&&"Entire catalogue".equals(promotion.getPurchasedItems())){
								if(StringUtils.isNotBlank(promotion.getRemark())&&promotion.getRemark().contains("成功结束")){
									continue;
								}
								tempList.add(promotion);
							}else if("jp,com".contains(promotion.getCountry())&&"Entire catalog".equals(promotion.getPurchasedItems())){
								if(StringUtils.isNotBlank(promotion.getRemark())&&promotion.getRemark().contains("成功结束")){
									continue;
								}
								tempList.add(promotion);
							}
							
							/*if(compareFlag){
								noExistsSet.add(entry.getKey());
								continue;
							}*/
							promotions.add(promotion);
						//}
					}
				}
				if(promotions!=null&&promotions.size()>0){
					amazonPromotionsWarningService.save(promotions);
				}
			}
			
		/*	if(isActiveList!=null&&isActiveList.size()>0){
				amazonPromotionsWarningService.updateIsActive(isActiveList,"com.inateck".equals(country.getName())?"com":country.getName());
			}*/
			
			String content="";
			String content1="";
			StringBuffer temp= new StringBuffer("");
			StringBuffer temp1= new StringBuffer("");
			
			
			if(claimCodeSet!=null&&claimCodeSet.size()>0){
				content="以下未有折扣码\n\n";
				content1="以下未有折扣码<br/>";
				Map<String,String> resMap =Maps.newHashMap();
				try{
					//分国家结束促销预警
						
						logger.info("调用amazon接口start");
						Map<String,String> curResMap = productService.endPromotions("com.inateck".equals(country.getName())?"com":country.getName(),claimCodeSet);
						logger.info("调用amazon接口end");
						if(curResMap!=null&&curResMap.size()>0){
							resMap.putAll(curResMap);
							for (Map.Entry<String,String> entry : resMap.entrySet()) {  
							    String tranId=entry.getKey();
								amazonPromotionsWarningService.updateStaAndRes(tranId,"com.inateck".equals(country.getName())?"com":country.getName(),entry.getValue());
							}
						}else{
							logger.info("返回结果为空");
						}
					
				}catch(Exception e){
					logger.error(e.getMessage(),e);
				}
				
				for (String proId: claimCodeSet) {
	        		temp.append("Promotion ID:"+proId+",Result:"+resMap.get(proId)+";\n\n");
	        		temp1.append("Promotion ID:"+proId+",Result:"+resMap.get(proId)+";<br/>");
	        	}
				
/*				content=content+temp.toString()+"\n\n";
				content1=content1+temp1.toString()+"<br/>";
				*/
				if(StringUtils.isNotEmpty(temp)){
					content=content+temp.toString()+"\n\n";
					content1=content1+temp1.toString()+"<br/>";
	    		}
			}
			
			
			
			/*if(noExistsSet!=null&&noExistsSet.size()>0){
				content="以下折扣不存在或不一致\n\n";
				content1="以下折扣不存在或不一致<br/>";
				Map<String,String> noExistsMap =Maps.newHashMap();
				try{
					//分国家结束促销预警
						
						logger.info("调用amazon接口start");
						Map<String,String> curResMap = productService.endPromotions("com.inateck".equals(country.getName())?"com":country.getName(),noExistsSet);
						logger.info("调用amazon接口end");
						if(curResMap!=null&&curResMap.size()>0){
							noExistsMap.putAll(curResMap);
							for(String tranId:noExistsMap.keySet()){
								try{
									amazonPromotionsWarningService.updateStaAndRes(tranId,"com.inateck".equals(country.getName())?"com":country.getName(), noExistsMap.get(tranId));
								}catch(Exception e){
									logger.error(e.getMessage(),e);
								}
							}
						}else{
							logger.info("返回结果为空");
						}
					
				}catch(Exception e){
					logger.error(e.getMessage(),e);
				}
				
				for (String proId: claimCodeSet) {
	        		temp.append("Promotion ID:"+proId+",Result:"+noExistsMap.get(proId)+";\n\n");
	        		temp1.append("Promotion ID:"+proId+",Result:"+noExistsMap.get(proId)+";<br/>");
	        	}
				
				if(StringUtils.isNotEmpty(temp)){
					content=content+temp.toString()+"\n\n";
					content1=content1+temp1.toString()+"<br/>";
	    		}
			}
			*/
			
			
			if(tempList!=null&&tempList.size()>0){//全局折扣
				Map<String,String> resMap =Maps.newHashMap();
				try{
					//分国家结束促销预警
						Set<String> promotionIds=Sets.newHashSet();
						for (AmazonPromotionsWarning warn: tempList) {
							promotionIds.add(warn.getPromotionId());
						}
						logger.info("调用amazon接口start");
						Map<String,String> curResMap = productService.endPromotions("com.inateck".equals(country.getName())?"com":country.getName(),promotionIds);
						logger.info("调用amazon接口end");
						if(curResMap!=null&&curResMap.size()>0){
							resMap.putAll(curResMap);
							for (Map.Entry<String,String> entry : resMap.entrySet()) { 
							    String tranId=entry.getKey();
								amazonPromotionsWarningService.updateStaAndRes(tranId,"com.inateck".equals(country.getName())?"com":country.getName(),entry.getValue());
							}
						}else{
							logger.info("返回结果为空");
						}
					
				}catch(Exception e){
					logger.error("全局折扣"+e.getMessage(),e);
				}
				
				
				content+="以下折扣ID设置为全场折扣\n\n";
				content1+="以下折扣ID设置为全场折扣<br/>";
				temp= new StringBuffer("");
				temp1= new StringBuffer("");
				for (AmazonPromotionsWarning proWarn : tempList) {
	        		temp.append("Promotion ID:"+proWarn.getPromotionId()+",Result:"+resMap.get(proWarn.getPromotionId())+";\n\n");
	        		temp1.append("Promotion ID:"+proWarn.getPromotionId()+",Result:"+resMap.get(proWarn.getPromotionId())+";<br/>");
	        	}
				
				
				
				if(StringUtils.isNotEmpty(temp)){
					content=content+temp.toString()+"\n\n";
					content1=content1+temp1.toString()+"<br/>";
	    		}
			}
			

            try{
            	Map<String,List<AmazonPromotionsWarning>> warnList=amazonPromotionsWarningService.getUnPromotions();
    			temp= new StringBuffer("");
    			temp1= new StringBuffer("");
	        	List<AmazonPromotionsWarning> entireCatalog=warnList.get("com.inateck".equals(country.getName())?"com":country.getName());
	        	Set<String> updateSet=Sets.newHashSet();
	        	if(entireCatalog!=null&&entireCatalog.size()>0){
	        		Map<String,Map<String,Integer>> fbaMap=fbaService.getFbaInventroyDataByAsin();//国家-asin-库存
	        		Set<String>   asinList=saleReportService.getPanEuProductAsin();
		        	for (AmazonPromotionsWarning proWarn : entireCatalog) {
		        		temp.append("Promotion ID:"+proWarn.getPromotionId()+";\n\n");
		        		temp1.append("Promotion ID:"+proWarn.getPromotionId()+";<br/>");
		        		try{
		        			Integer id=proWarn.getId();
	        			    String asinStr=proWarn.getClaimCode();
	        			    if(asinStr.contains(",")){
	        			    	String[] asinArr=asinStr.split(",");
	        			    	for (String asin : asinArr) {
	        			    	/*	if(fbaMap!=null&&fbaMap.get(country)!=null&&fbaMap.get(country).get(asin)!=null){
			        			    	Integer quantity=MathUtils.roundUp(fbaMap.get(country).get(asin)*1.0d/4);
			        			    	updateSet.add(id+","+asin+","+quantity);
			        			    }*/
	        			    		
	        			    		if(asinList!=null&&asinList.contains(asin)&&"uk,fr,it,es".contains("com.inateck".equals(country.getName())?"com":country.getName())){
	        			    			if(fbaMap!=null&&fbaMap.get("de")!=null&&fbaMap.get("de").get(asin)!=null){
				        			    	Integer quantity=MathUtils.roundUp(fbaMap.get("de").get(asin)*1.0d/4);
				        			    	updateSet.add(id+","+asin+","+quantity);
				        			    }
		        			    	}else{
		        			    		if(fbaMap!=null&&fbaMap.get("com.inateck".equals(country.getName())?"com":country.getName())!=null&&fbaMap.get("com.inateck".equals(country.getName())?"com":country.getName()).get(asin)!=null){
				        			    	Integer quantity=MathUtils.roundUp(fbaMap.get("com.inateck".equals(country.getName())?"com":country.getName()).get(asin)*1.0d/4);
				        			    	updateSet.add(id+","+asin+","+quantity);
				        			    }
		        			    	}
	        			    		
								}
	        			    }else{
	        			    	/*if(fbaMap!=null&&fbaMap.get(country)!=null&&fbaMap.get(country).get(asinStr)!=null){
		        			    	Integer quantity=MathUtils.roundUp(fbaMap.get(country).get(asinStr)*1.0d/4);
		        			    	updateSet.add(id+","+asinStr+","+quantity);
		        			    }*/
	        			    	if(asinList!=null&&asinList.contains(asinStr)&&"uk,fr,it,es".contains("com.inateck".equals(country.getName())?"com":country.getName())){
        			    			if(fbaMap!=null&&fbaMap.get("de")!=null&&fbaMap.get("de").get(asinStr)!=null){
			        			    	Integer quantity=MathUtils.roundUp(fbaMap.get("de").get(asinStr)*1.0d/4);
			        			    	updateSet.add(id+","+asinStr+","+quantity);
			        			    }
	        			    	}else{
	        			    		if(fbaMap!=null&&fbaMap.get("com.inateck".equals(country.getName())?"com":country.getName())!=null&&fbaMap.get("com.inateck".equals(country.getName())?"com":country.getName()).get(asinStr)!=null){
			        			    	Integer quantity=MathUtils.roundUp(fbaMap.get("com.inateck".equals(country.getName())?"com":country.getName()).get(asinStr)*1.0d/4);
			        			    	updateSet.add(id+","+asinStr+","+quantity);
			        			    }
	        			    	}
	        			    	
	        			    }
		        		}catch(Exception e){
		        			logger.error("更新监控状态异常！",e);
		        		}
		        	}
		        	content+="以下折扣ID未设置监控或正在监控状态折扣有在售产品未设置监控数量,系统默认监控在售产品累计数量设置为库存的1/4.\n\n";
	            	content1+="以下折扣ID未设置监控或正在监控状态折扣有在售产品未设置监控数量,系统默认监控在售产品累计数量设置为库存的1/4.<br/>";
	            	if(StringUtils.isNotEmpty(temp)){
	            		content=content+temp.toString()+"\n\n";
						content1=content1+temp1.toString()+"<br/>";
	            	}
	            	 if(updateSet!=null&&updateSet.size()>0){
						 try{
							 amazonPromotionsWarningService.updateCumulativeQuantity(updateSet);
						 }catch(Exception e){
							 logger.error("更新监控状态异常！",e);
						 }
					 }
	        	}	
            }catch(Exception e){
            	logger.error(e.getMessage(),e);
            }
            
            if(StringUtils.isNotEmpty(content)){
				String  toAddress=email;
				final MailInfo mailInfo = new MailInfo(toAddress,("com.inateck".equals(country.getName())?"us":country.getName())+"折扣ID预警"+DateUtils.getDate("-yyyy/MM/dd"), new Date());
				mailInfo.setContent(content1);
				mailInfo.setCcToAddress("ethan@inateck.com,tim@inateck.com,eileen@inateck.com");
				new Thread(){
					public void run(){   
						manager.send(mailInfo);
					}
				}.start();
				
    			String toEmail=loginName+"|tim|eileen|ethan";
				try{
					WeixinSendMsgUtil.sendTextMsgToUser(toEmail,content);
				}catch(Exception e){
					logger.error("cross帖微信发送账号错误异常！",e);
				}
    		}
            
            
			
		} catch (Exception e) {
			logger.error(e.getMessage(),e);
		}finally{
			LoginUtil.closeClient(client, country.getSuffix());
			AmzLoginPool.returnClient(country.getName(), client);
		}
		
		if(deleteSets!=null&&deleteSets.size()>0){
			final MailInfo mailInfo = new MailInfo("amazon-sales@inateck.com","折扣产品列表与亚马逊后台ASIN list不一致"+DateUtils.getDate("-yyyy/MM/dd"), new Date());
			StringBuffer buf= new StringBuffer("Hi,All 以下折扣产品列表与亚马逊后台ASIN list不一致：<br/>");
			for (String pro: deleteSets) {
				buf.append(pro+"<br/>");
			}
			mailInfo.setContent(buf.toString());
			mailInfo.setCcToAddress("eileen@inateck.com");
			new Thread(){
				public void run(){   
					manager.send(mailInfo);
				}
			}.start();
		}
		logger.info("手动同步折扣结束");
	}
	
	
	private int findActivePromotionId(WebClient client,WebRequest request ,Map<String,String> result,int times){
		try{
			HtmlPage page = client.getPage(request);
			Document doc = Jsoup.parse(page.asXml());
			Elements eles = doc.getElementsByClass("mt-link-content");
			for (Iterator<Element> iterator = eles.iterator(); iterator.hasNext();) {
				Element ele = (Element) iterator.next();
				String href=ele.attr("href");
				String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
				result.put(trackId,href);
			}
			Element num = doc.getElementById("mt-header-count-value");
			Integer count = 0 ;
			if(num!=null){
				try {
					count = Integer.parseInt(num.text());
				} catch (Exception e) {}
			}
			return count;
		}catch(Exception e){
			logger.error(e.getMessage(),e);
			try {
				Thread.sleep(60000);
			} catch (InterruptedException e1) {}
			if(times<10){
				times++;
				return findActivePromotionId(client,request,result,times);
			}else{
				return 0;
			}
			
		}
	}
	
	private int findPendingPromotionId(WebClient client,WebRequest request ,Map<String,String> result,int times){
		try{
			HtmlPage page = client.getPage(request);
			Document doc = Jsoup.parse(page.asXml());
			Elements eles = doc.getElementsByClass("mt-link-content");
			for (Iterator<Element> iterator = eles.iterator(); iterator.hasNext();) {
				Element ele = (Element) iterator.next();
				String href=ele.attr("href");
				String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
				result.put(trackId,href);
				//result.put(ele.text().trim(),ele.attr("href"));
			}
			Element num = doc.getElementById("mt-header-count-value");
			Integer count = 0 ;
			if(num!=null){
				try {
					count = Integer.parseInt(num.text());
				} catch (Exception e) {}
			}
			return count;
		}catch(Exception e){
			logger.error(e.getMessage(),e);
			try {
				Thread.sleep(60000);
			} catch (InterruptedException e1) {}
			if(times<10){
				return findPendingPromotionId(client,request,result,times);
			}else{
				return 0;
			}
			
		}
	}
	
	
	private void findPromotionId(WebClient client,WebRequest request ,Map<String,String> result){
		try{
			HtmlPage page = client.getPage(request);
			Document doc = Jsoup.parse(page.asXml());
			Elements eles = doc.getElementsByClass("mt-link-content");
			for (Iterator<Element> iterator = eles.iterator(); iterator.hasNext();) {
				//Element ele = (Element) iterator.next();
				//result.put(ele.text().trim(),ele.attr("href"));
				Element ele = (Element) iterator.next();
				String href=ele.attr("href");
				String trackId=URLDecoder.decode(href.split("trackingId=")[1], "utf-8");
				result.put(trackId,href);
			}
			Element num = doc.getElementById("mt-header-count-value");
			if(num!=null){
				Integer count = 0 ;
				try {
					count = Integer.parseInt(num.text());
				} catch (Exception e) {}
				if(count>25){
					String startDate = "";
					startDate = doc.getElementsByClass("mt-text-content").last().text().trim();
					startDate = startDate.split(" ")[0];
					Elements st = doc.getElementsByAttributeValue("name", "startSearchDate");
					String start = "";
					if(st!=null&&st.get(0)!=null){
						start = st.get(0).val();
					}
					if(startDate.equals(start)){
						logger.error("折扣统计："+request.getUrl().toString()+":::"+start+"超过25个了！！！");
						throw new RuntimeException("折扣统计："+request.getUrl().toString()+":::"+start+"超过25个了！！！");
					}
					List<NameValuePair> params = new ArrayList<NameValuePair>();
					params.add(new NameValuePair("searchType", "DATE"));
					params.add(new NameValuePair("dateSearchType", "END_DATE"));
					params.add(new NameValuePair("startSearchDate",startDate));
					params.add(new NameValuePair("endSearchDate","01/01/2050"));
					request.setRequestParameters(params);
					findPromotionId(client,request,result);
				}
			}
		}catch(Exception e){
			logger.error(e.getMessage(),e);
			try {
				Thread.sleep(60000);
			} catch (InterruptedException e1) {}
			//findPromotionId(client,request,result);
		}
	}
	
	private  AmazonPromotionsWarning getPromotionDetails(WebClient webClient,String country,String trackingId,String url,int num){
		try{
			AmazonPromotionsWarning filledAmazonPromotion = new AmazonPromotionsWarning();
			if("com.inateck".equals(country)){
				filledAmazonPromotion.setCountry("com");
			}else{
				filledAmazonPromotion.setCountry(country);
			}
			
			filledAmazonPromotion.setPromotionId(trackingId);
			filledAmazonPromotion.setCreateDate(new Date());
			HtmlPage htmlPage = webClient.getPage("https://sellercentral.amazon."+CountryType.getCountryTypeByEsayName(country).getSuffix()+url);
			if(htmlPage==null){
				return null;
			}
			try{
				//List<DomElement> tables =(List<DomElement>)htmlPage.getByXPath("//table[@class='a-keyvalue a-span12']");
				//DomElement tableElement = tables.get(2);
				//List<DomElement> tdElement =(List<DomElement>)tableElement.getByXPath("//div[@class='a-column a-span0 a-spacing-none a-spacing-top-null']//span");
				List<DomElement> tdElement =(List<DomElement>)htmlPage.getByXPath("//div[@id='step3']//span");
				if(tdElement!=null&&tdElement.size()>=1){
					String isNoContent=tdElement.get(1).getTextContent();
					if("No".equals(isNoContent)){
						filledAmazonPromotion.setClaimCode("No");
					}
				}
			}catch(Exception e){
				logger.error(e.getMessage(),e);
			}
			//de 10/25/20162:00 PMCET  uk 21/10/201609:00GMT es 8/22/20132:00 PMCET fr 9/12/20163:00 PMCET it 9/21/20162:00 PMCET
			//com 10/24/201612:01 AMPDT ca 06/07/201512:01 AMPDT  jp 	4/22/201711:59 PMJST
			DomText domText1 = (DomText) htmlPage.getByXPath("//*[@id=\"startDate\"]/text()").get(0);
			String startTime= ((DomText) htmlPage.getByXPath("//*[@id=\"startTime\"]/text()").get(0)).getTextContent().trim();
			
			if("uk".equals(filledAmazonPromotion.getCountry())){
				String startDate=domText1.getTextContent().trim();
				filledAmazonPromotion.setStartDate(new SimpleDateFormat("dd/MM/yyyy HH:mm").parse(startDate+" "+startTime));
				
				DomText domText2 = (DomText) htmlPage.getByXPath("//*[@id=\"endDate\"]/text()").get(0);
				String endTime= ((DomText) htmlPage.getByXPath("//*[@id=\"endTime\"]/text()").get(0)).getTextContent().trim();
				String endDate=domText2.getTextContent().trim();
				filledAmazonPromotion.setEndDate(new SimpleDateFormat("dd/MM/yyyy HH:mm").parse(endDate+" "+endTime));    
			}else{
				if(startTime.contains("AM")){
					startTime=startTime.split(" ")[0];
				}else{
					startTime=startTime.split(" ")[0];
					String[] arr=startTime.split(":");
					Integer afterDate=Integer.parseInt(arr[0])+12;
					if(afterDate>=24){
						afterDate=23;
					}
					startTime=afterDate+":"+arr[1];
				}
				
				String startDate=domText1.getTextContent().trim();
			    filledAmazonPromotion.setStartDate(new SimpleDateFormat("MM/dd/yyyy HH:mm").parse(startDate+" "+startTime));
			    //endTime
			    DomText domText2 = (DomText) htmlPage.getByXPath("//*[@id=\"endDate\"]/text()").get(0);
			    String endTime= ((DomText) htmlPage.getByXPath("//*[@id=\"endTime\"]/text()").get(0)).getTextContent().trim();
			    if(endTime.contains("AM")){
			    	endTime=endTime.split(" ")[0];
				}else{
					endTime=endTime.split(" ")[0];
					String[] arr=endTime.split(":");
					Integer afterDate=Integer.parseInt(arr[0])+12;
					if(afterDate>=24){
						afterDate=23;
					}
					endTime=afterDate+":"+arr[1];
				}
			    
			    String endDate=domText2.getTextContent().trim();
			    filledAmazonPromotion.setEndDate(new SimpleDateFormat("MM/dd/yyyy HH:mm").parse(endDate+" "+endTime));
			}
			
			
	        DomText domText3 = (DomText) htmlPage.getByXPath("//*[@id=\"conditionType\"]/text()").get(0);
	        DomText domText4 = (DomText) htmlPage.getByXPath("//*[@id=\"conditionValue\"]/text()").get(0);
	        filledAmazonPromotion.setBuyerPurchases(domText3.getTextContent().trim() + " " + domText4.getTextContent().trim());
	        filledAmazonPromotion.setConditionType(domText3.getTextContent().trim());//For every quantity of items purchased
	        filledAmazonPromotion.setPurchaseQuantity(Float.parseFloat(domText4!=null?domText4.getTextContent().trim().replaceAll(",", "."):"0"));
	        
	        try{
	        	if("At least this quantity of items".contains(filledAmazonPromotion.getConditionType())&&htmlPage.getByXPath("//*[@id=\"quantity\"]/text()")!=null&&htmlPage.getByXPath("//*[@id=\"quantity\"]/text()").size()>0){
	        		 DomText tempText = (DomText) htmlPage.getByXPath("//*[@id=\"quantity\"]/text()").get(0);
	        		 filledAmazonPromotion.setTempQuantity(Integer.parseInt(tempText!=null?tempText.getTextContent().trim():"0"));
	        		 filledAmazonPromotion.setQuantity(Integer.parseInt(domText4!=null?domText4.getTextContent().trim():"0"));
		        }
	        }catch(Exception e){
	        	 logger.error(e.getMessage(),e);
	        }
	        
	        
	        
	        DomText domText5 = (DomText) htmlPage.getByXPath("//*[@id=\"benefitType\"]/text()").get(0);
	        DomText domText6 =null;
	        if(htmlPage.getByXPath("//*[@id=\"benefitValue\"]/text()")!=null&&htmlPage.getByXPath("//*[@id=\"benefitValue\"]/text()").size()>0){
	        	domText6 = (DomText) htmlPage.getByXPath("//*[@id=\"benefitValue\"]/text()").get(0);
	        }
	        filledAmazonPromotion.setBuyerGets(domText5.getTextContent().trim() +" " + (domText6!=null?domText6.getTextContent().trim():""));
	       
	        filledAmazonPromotion.setAmountOffPrice(Float.parseFloat(domText6!=null?domText6.getTextContent().trim().replaceAll(",", "."):"0"));
	        
	        

			try{
				   List<DomText> asinList = (List<DomText>) htmlPage.getByXPath("//*[@id=\"benefitSingleAsin\"]/text()");
				   if(asinList!=null&&asinList.size()>0){
					   if(filledAmazonPromotion.getBuyerGets().contains("Free items")){
						   filledAmazonPromotion.setQualifyingItem(asinList.get(0).getTextContent().trim());
					   }else{
						   filledAmazonPromotion.setMainAsin(asinList.get(0).getTextContent().trim());
					   }
				   }
				   List<DomText> tempDomText=(List<DomText>) htmlPage.getByXPath("//*[@id=\"includeId\"]/text()");
				   if(tempDomText!=null&&tempDomText.size()>0){
					   filledAmazonPromotion.setPurchasedItems(tempDomText.get(0).getTextContent());
				   }
				  
			}catch(Exception e){
				  logger.error(e.getMessage(),e);
			}
			
	        
	        DomText domText = (DomText) htmlPage.getByXPath("//*[@id=\"promotionId\"]/text()").get(0);
	        filledAmazonPromotion.setPromotion(domText.getTextContent().trim());
		    
	        if (htmlPage.getByXPath("//*[@id=\"oneRedemptionCheckbox\"]/text()").size() > 0) {
	            domText1 = (DomText) htmlPage.getByXPath("//*[@id=\"oneRedemptionCheckbox\"]/text()").get(0);
	            filledAmazonPromotion.setOneRedemption(domText1.getTextContent().trim());
	        }
	        
	        try{
	        	if(htmlPage.getByXPath("//*[@id=\"combinabilityType\"]/text()").size()>0){
	        		DomText claimCodeCombinabilityText = (DomText) htmlPage.getByXPath("//*[@id=\"combinabilityType\"]/text()").get(0);//Exclusive
		  	        filledAmazonPromotion.setClaimCodeCombinability(claimCodeCombinabilityText.getTextContent().trim());
	        	}
	        }catch(Exception e){
	        	logger.error("error",e);
	        }
	      
	        try{
				if (htmlPage.getByXPath("//*[@id=\"claimCodeText\"]/text()").size() > 0) {
		            domText1 = (DomText) htmlPage.getByXPath("//*[@id=\"claimCodeText\"]/text()").get(0);
		            filledAmazonPromotion.setPromotionCode(domText1.getTextContent().trim());
		        }
			}catch(Exception e){
				logger.error("error",e);
			}
	        
	       
	        
	      //  String tempUrl="https://sellercentral.amazon."+CountryType.getCountryTypeByEsayName(country).getSuffix()+"/hz/promotions/manage/product-search?searchType=TRACKING_ID&trackingId="+temp+"&startSearchDate=&endSearchDate=&undefined";
	       // htmlPage = webClient.getPage(tempUrl);
	      //  Pattern itemPattern = Pattern.compile("^href.*?\\>$");
	      //  String text=htmlPage.asXml();
	       // String  productUrl="";//URLEncoder.encode("Free-italia 03 Other 40 euro off-Ed")
	        try{
	        	if(StringUtils.isNotBlank(filledAmazonPromotion.getPurchasedItems())){
	        		 String temp= URLEncoder.encode(filledAmazonPromotion.getPurchasedItems(), "utf-8"); 
	        		 if(!trackingId.startsWith("F-SysAuto")){
	 	        		//productUrl=text.substring(text.indexOf("/hz/promotions")).substring(0,text.substring(text.indexOf("/hz/promotions")).indexOf("\""));
	 		        	String productUrl="/promotions/productSelection/view-product-selection?trackingId="+temp;
	 		        	htmlPage = webClient.getPage("https://sellercentral.amazon."+CountryType.getCountryTypeByEsayName(country).getSuffix()+productUrl);
	 				    List<DomElement> els =(List<DomElement>)htmlPage.getByXPath("//div[@class='a-input-text-wrapper a-span12']//textarea");
	 				    DomElement doc = els.get(0);
	 					String asinCnt=doc.getTextContent();
	 				
	 				    String[] content = asinCnt.split("\n");
	 				    List<AmazonPromotionsWarningItem> items=Lists.newArrayList();
	 				    
	 				    if(StringUtils.isNotBlank(filledAmazonPromotion.getMainAsin())){
	 				    	AmazonPromotionsWarningItem item=new AmazonPromotionsWarningItem();
	 		        		item.setAsin(filledAmazonPromotion.getMainAsin());
	 				    	item.setWarning(filledAmazonPromotion);
	 				    	items.add(item);
	 				    }else{
	 				    	 for (int i = 0; i < content.length; i++) {
	 						    	AmazonPromotionsWarningItem item=new AmazonPromotionsWarningItem();
	 						    	item.setAsin(content[i]);
	 						    	item.setWarning(filledAmazonPromotion);
	 						    	items.add(item);
	 						}
	 				    }
	 				    
	 				   /* boolean flag=true;
	 				    for (int i = 0; i < content.length; i++) {
	 				    	AmazonPromotionsWarningItem item=new AmazonPromotionsWarningItem();
	 				    	item.setAsin(content[i]);
	 				    	item.setWarning(filledAmazonPromotion);
	 				    	items.add(item);
	 				    	if(StringUtils.isNotBlank(filledAmazonPromotion.getMainAsin())&&filledAmazonPromotion.getMainAsin().equals(content[i])){
	 				    		flag=false;
	 				    	}
	 					}
	 				    
	 				    if(StringUtils.isNotBlank(filledAmazonPromotion.getMainAsin())&&flag){
	 		        		AmazonPromotionsWarningItem item=new AmazonPromotionsWarningItem();
	 		        		item.setAsin(filledAmazonPromotion.getMainAsin());
	 				    	item.setWarning(filledAmazonPromotion);
	 				    	items.add(item);
	 		        	}*/
	 				    
	 				    filledAmazonPromotion.setItems(items);
	 	        	}
	        	}
	        }catch(Exception e){
	        	//logger.info(trackingId+"没有查到item详情");
	        }
			return filledAmazonPromotion;
		}catch(Exception e){
	    	   logger.error(trackingId+" error",e.getMessage());
	    	 /*  try {
					Thread.sleep(60000);
	    	   } catch (InterruptedException e1) {}
	    	   if(num<2){
	    		   num++;
	    		   return getPromotionDetails(webClient, country, trackingId,url,num);
	    	   }else{
	    		   return null;
	    	   }*/
		       return null;
		}
	}
	
	
	public void sendPromotionsRate(){
		Map<String,String> proRate=amazonOrderService.findPromotionsRate();
		Map<String,Map<String,Integer>> rankPromotions=amazonOrderService.findRankPromotions();
		Map<String, String> emailAndLoginNameMap = systemService.findLoginNameByEmail();
		
		if(DateUtils.isHoliday()){//节假日
			try{
				SaleReport saleReport=new SaleReport();
				saleReport.setCurrencyType("EUR");
				saleReport.setSearchType("1");
				saleReport.setEnd(new Date());
				saleReport.setStart(DateUtils.addDays(new Date(), -10));
				Map<String,Map<String, SaleReport>> saleMap=saleReportService.getSales(saleReport,null);
				SimpleDateFormat dateFormat=new SimpleDateFormat("yyyyMMdd");
				if(saleMap!=null&&saleMap.size()>0){
					String end=dateFormat.format(DateUtils.addDays(new Date(),-1));
					String start=dateFormat.format(DateUtils.addDays(new Date(),-8));
					for (Map.Entry<String, Map<String, SaleReport>> entry : saleMap.entrySet()) {  
					    String country=entry.getKey();
					    Map<String, SaleReport> reportMap=entry.getValue();
						Integer startQuantity=0;
						if(reportMap.get(start)!=null&&reportMap.get(start).getSalesVolume()!=null){
							startQuantity=reportMap.get(start).getSalesVolume();
						}
						Integer endQuantity=0;
						if(reportMap.get(end)!=null&&reportMap.get(end).getSalesVolume()!=null){
							endQuantity=reportMap.get(end).getSalesVolume();
						}
						if((endQuantity-startQuantity)/startQuantity>=30||(endQuantity-startQuantity)/startQuantity<=-30){
							String toEmail="";
							List<String> emailList=systemService.findUserByMenuName("amazoninfo:feedSubmission:"+country);;
							StringBuffer buf= new StringBuffer();
							for (String email :emailList) {
								buf.append(emailAndLoginNameMap.get(email)+"|");
							}
							buf.append("eileen|tim");
							toEmail=buf.toString();
							try{
								WeixinSendMsgUtil.sendTextMsgToUser("eileen",("com".equals(country)?"US":country.toUpperCase())+","+start+"销量:"+startQuantity+","+end+"销量:"+endQuantity);
							}catch(Exception e){
								logger.error("error",e);
							}
							
						}
						
					}
				}
			}catch(Exception e){
				logger.error("error",e);
			}
			
		}
		
		
		if(proRate!=null&&proRate.size()>0){
			for (Map.Entry<String,String> entry : proRate.entrySet()) { 
			    String country=entry.getKey();
				String toEmail="";
				StringBuffer buf= new StringBuffer();
				List<String> emailList=systemService.findUserByMenuName("amazoninfo:feedSubmission:"+country);
				for (String email :emailList) {
    				buf.append(emailAndLoginNameMap.get(email)+"|");
				}
				buf.append("eileen|tim");
				toEmail=buf.toString();
				StringBuffer buff= new StringBuffer();
				try{
					int i=1;
					if(rankPromotions!=null){
						Map<String,Integer> temp=rankPromotions.get(country);
						if(temp!=null){
							for (Map.Entry<String,Integer> entryRs : temp.entrySet()) {  
							    String proId =entryRs.getKey();
								if(i>3){break;}
								buff.append(proId+",数量:"+entryRs.getValue()+";");
								i++;
							}
						}
					}
					
				}catch(Exception e){
					logger.error("rank",e);
				}
				try{
					WeixinSendMsgUtil.sendTextMsgToUser(toEmail,entry.getValue()+(StringUtils.isNotBlank(buff.toString())?buff.toString():""));
				}catch(Exception e){
					logger.error("error",e);
				}
			}
		}
	}
	
	public void changeFreePromotions(){
		Map<String,StringBuffer> freeInfoMap=Maps.newHashMap();
		Map<String,Set<String>> map=amazonPromotionsWarningService.findFreePromotionsByCountry();
		Map<String,Map<String,String>> codeMap=amazonPromotionsWarningService.findPromotionsCode2();
		for (Map.Entry<String,Set<String>> entryMap : map.entrySet()) {  
		    String country=entryMap.getKey();
			StringBuffer temp= new StringBuffer("");
			Set<String> promotionIds=Sets.newHashSet();
			Map<String,String> nameMap=Maps.newHashMap();
			Set<String> allInfo=entryMap.getValue();
			//if(allInfo!=null&allInfo.size()>0){
				for (String info: allInfo) {
					if(info.contains(";")){
						String[] arr=info.split(";");
						promotionIds.add(arr[0]);
						nameMap.put(arr[0],info.replace(arr[0]+";",""));
					}else{
						promotionIds.add(info);
					}
				}
			//}
			if(promotionIds!=null&&promotionIds.size()>0){
			Map<String,String> curResMap = this.productService.genPromotions(country, promotionIds);
			    for (Map.Entry<String,String> entry : curResMap.entrySet()) {  
				    String proId=entry.getKey();
					String code=entry.getValue();
					if(codeMap!=null&&codeMap.get(country)!=null&&codeMap.get(country).get(proId)!=null){
						code+="("+codeMap.get(country).get(proId)+")";
					}
					temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#f5fafe; '>");
					temp.append("<td>"+proId+"</td><td>"+(code.startsWith("#")?code.substring(1):code)+"</td><td>"+(nameMap.get(proId)==null?"":nameMap.get(proId))+"</td>");
				}
				freeInfoMap.put(country, temp);
			}
		}
	    if(freeInfoMap==null||freeInfoMap.size()==0){
	    	return;
	    }
	
		//国家-邮箱
		
		Map<String,Set<User>>  countryUserMap=psiProductGroupUserService.getRelitiveCountryManager();
		Map<String,String> emailCountry=Maps.newHashMap();//用户-多个国家
		/*Map<String,User> countryUser=psiProductGroupUserService.getCountryManager();
		for (String country: countryUser.keySet()) {
			User user=countryUser.get(country);
			if(user==null){
				user=new User();
				user.setEmail("ethan@inateck.com");
			}
			String countryStr=emailCountry.get(user.getEmail());
			if(StringUtils.isNotBlank(countryStr)){
				emailCountry.put(user.getEmail(),country+","+countryStr);
			}else{
				emailCountry.put(user.getEmail(),country+",");
			}
		}*/
		for (Map.Entry<String,Set<User>> entry : countryUserMap.entrySet()) {  
		    String country=entry.getKey();
			Set<User> userSet=entry.getValue();
			for (User user : userSet) {
				if(user==null){
					user=new User();
					user.setEmail("ethan@inateck.com");
				}
				String countryStr=emailCountry.get(user.getEmail());
				if(StringUtils.isNotBlank(countryStr)){
					emailCountry.put(user.getEmail(),country+","+countryStr);
				}else{
					emailCountry.put(user.getEmail(),country+",");
				}
			}
		}
		emailCountry.put("stefanie@inateck.com","uk,fr,it,es,jp");
		try{
			for (Map.Entry<String,String> entry : emailCountry.entrySet()) { 
					        String email=entry.getKey();
						    String keyStr=entry.getValue();
						    StringBuffer content= new StringBuffer("");
						    content.append("hi,all <br/> &nbsp;&nbsp;&nbsp;&nbsp;以下Free折扣自动更换,请注意查看!");
							content.append("<table width='90%' style='border:1px solid #cad9ea;color:#666; '>");
		        			StringBuffer temp= new StringBuffer("");
		        			for (String country : countryList) {
				        		if(keyStr.contains(country)){
				        			if(freeInfoMap!=null&&freeInfoMap.get(country)!=null){
				        				temp.append("<tr style='background-repeat:repeat-x;text-align:center;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#9ACD32;'><td colspan='3'><span style='font-weight: bold;font-size:25px'>"+("com".equals(country)?"us":country)+"Free折扣更换详情</span></td></tr>");
					        			temp.append("<tr style='background-repeat:repeat-x;height:30px; border:1px solid #cad9ea; padding:0 1em 0;background-color:#4EFEB3; '><th>PromotionId</th><th>Result</th><th>产品</th></tr>");
										temp.append(freeInfoMap.get(country));
				        			}
				        		}
							}	
							content.append(temp);
		        			content.append("</table>");
		        			if(StringUtils.isNotEmpty(temp)){
				    			Date date = new Date();
				    			String  toAddress=email;
								final MailInfo mailInfo = new MailInfo(toAddress,"Free折扣更新"+DateUtils.getDate("-yyyy/MM/dd"),date);
								mailInfo.setContent(content.toString());
								new Thread(){
									public void run(){   
										mailManager.send(mailInfo);
									}
								}.start();
								
				    		}
			}		
		}catch(Exception e){
			logger.error("free折扣更新"+e.getMessage(),e);
		}
	
	}
	
	
	
	public SystemService getSystemService() {
		return systemService;
	}

	public void setSystemService(SystemService systemService) {
		this.systemService = systemService;
	}

	public static void main(String[] args) {
		PromotionsWarnMonitor monitor=new PromotionsWarnMonitor();
		ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext("/spring-context.xml");
		AmazonPromotionsWarningService  com= applicationContext.getBean(AmazonPromotionsWarningService.class);
		AmazonProductService ser =applicationContext.getBean(AmazonProductService.class);
		//SystemService systemService =applicationContext.getBean(SystemService.class);
		monitor.setAmazonProductService(ser);
		monitor.setAmazonPromotionsWarningService(com);//it error
		//monitor.setSystemService(systemService);
		/*Map<String,List<AmazonPromotionsWarning>> data = new HashMap<String, List<AmazonPromotionsWarning>>();
		//扫出所有数据
		for(int i = 0;i <CountryType.values().length;i++){
			CountryType country = CountryType.values()[i];
			logger.info("start:"+country.getName());
			data.put(country.getName(),monitor.scannerData(country));
		}
		for(int i = 0;i <CountryType.values().length;i++){
			CountryType country = CountryType.values()[i];
			monitor.scannerData(country);
		}*/
		//monitor.saveData();
		//com.save(list);
		/*try {
			WebRequest request =new WebRequest(new URL("file:///C:/Users/admin/Desktop/ii.html"), HttpMethod.POST);
			WebClient  client = LoginUtil.register("de",false);
			HtmlPage page = client.getPage(request);
			Document doc = Jsoup.parse(page.asXml());
			Elements eles = doc.getElementsByClass("mt-link-content");
			for (Iterator<Element> iterator = eles.iterator(); iterator.hasNext();) {
				Element ele = (Element) iterator.next();
				String trackId=ele.html().trim();
				if(trackId.contains("2101")){
					System.out.println(trackId);
				}
				
			}
		} catch (Exception e) {
			e.printStackTrace();
		}*/
		/*System.out.println(HtmlUtils.htmlUnescape("F-BP2101S++off+13+29.99+1.11-17"));
		try {
			String href="/hz/promotions/view?trackingId=F-BP2101S++off+13+29.99+1.11-17";
			System.out.println(href.split("trackingId=")[1]);
			System.out.println(URLDecoder.decode("F-BP2101S++off+13+29.99+1.11-17", "utf-8"));
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}*/
		/*
		Map<String,List<AmazonPromotionsWarning>> warnList=com.getUnPromotions();
		
		    String content="以下折扣ID未设置监控\n\n";
			StringBuffer temp= new StringBuffer("");
			for (String country : countryList) {
        			List<AmazonPromotionsWarning> entireCatalog=warnList.get(country);
        			if(entireCatalog!=null&&entireCatalog.size()>0){
        				for (AmazonPromotionsWarning proWarn : entireCatalog) {
	        				temp.append("country:"+("com".equals(proWarn.getCountry())?"us":proWarn.getCountry())+",Promotion ID:"+proWarn.getPromotionId()+";\n\n");
	        			}
	        			
        			}
			}	
			
			if(StringUtils.isNotEmpty(temp)){
				 try{
						WeixinSendMsgUtil.sendTextMsgToUser("eileen",content+temp.toString());
					}catch(Exception e){
						logger.error("cross帖微信发送账号错误异常！",e);
					}
    		
	  }*/
		System.out.println(URLEncoder.encode("Free-italia 03 Other 40 euro off-Ed"));
		applicationContext.close();
	}


	public AmazonPromotionsWarningService getAmazonPromotionsWarningService() {
		return amazonPromotionsWarningService;
	}


	public void setAmazonPromotionsWarningService(
			AmazonPromotionsWarningService amazonPromotionsWarningService) {
		this.amazonPromotionsWarningService = amazonPromotionsWarningService;
	}


	public AmazonProductService getAmazonProductService() {
		return amazonProductService;
	}


	public void setAmazonProductService(AmazonProductService amazonProductService) {
		this.amazonProductService = amazonProductService;
	}

	public PsiProductService getProductService() {
		return productService;
	}

	public void setProductService(PsiProductService productService) {
		this.productService = productService;
	}
	
	
	
}
